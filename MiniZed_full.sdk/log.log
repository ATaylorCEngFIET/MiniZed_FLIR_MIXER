Project:               Minized_2
File:                  file:/C:/Users/aptay/Downloads/Micrium-Probe-TargetCode-410/Micrium/Software/uC-Probe/Target/Communication/Generic/Cfg/Template/probe_com_cfg.h
Language:              GNU C
Index Version:         191.0
Build Configuration:   Debug
Context:               file:/C:/hdl_projects/MiniZed_full/MiniZed_full.sdk/Minized_2/src/helloworld.c
   C, {}
Versions in Index:     1
   C: {}; 40 macros, 0 includes, 40 names;

Include Search Path (option -I):
   C:\hdl_projects\MiniZed_full\MiniZed_full.sdk\Minized_2\..\standalone_bsp_0\ps7_cortexa9_0\include
   C:\hdl_projects\MiniZed_full\MiniZed_full.sdk\Minized_2\Debug\..\standalone_bsp_0\ps7_cortexa9_0\include
   ..\standalone_bsp_0\ps7_cortexa9_0\include
   C:\Users\aptay\Downloads\Micrium-Probe-TargetCode-410\Micrium\Software\uC-CPU
   C:\Users\aptay\Downloads\Micrium-Probe-TargetCode-410\Micrium\Software\uC-CPU\Cfg\Template
   C:\Users\aptay\Downloads\Micrium-Probe-TargetCode-410\Micrium\Software\uC-CPU\ARM-Cortex-A9\GNU
   C:\Users\aptay\Downloads\Micrium-Probe-TargetCode-410\Micrium\Software\uC-LIB
   C:\Users\aptay\Downloads\Micrium-Probe-TargetCode-410\Micrium\Software\uC-LIB\Cfg\Template
   C:\Users\aptay\Downloads\Micrium-Probe-TargetCode-410\Micrium\Software\uC-LIB\Ports\ARM\GNU
   C:\Users\aptay\Downloads\Micrium-Probe-TargetCode-410\Micrium\Software\uC-Probe\Target\Communication\Generic\Source
   C:\Users\aptay\Downloads\Micrium-Probe-TargetCode-410\Micrium\Software\uC-Probe\Target\Communication\Generic\Cfg\Template
   c:/xilinx/sdk/2016.4/gnu/aarch32/nt/gcc-arm-none-eabi/lib/gcc/arm-none-eabi/5.2.1/include
   c:/xilinx/sdk/2016.4/gnu/aarch32/nt/gcc-arm-none-eabi/lib/gcc/arm-none-eabi/5.2.1/include-fixed
   c:/xilinx/sdk/2016.4/gnu/aarch32/nt/gcc-arm-none-eabi/arm-none-eabi/include
   c:/xilinx/sdk/2016.4/gnu/aarch32/nt/gcc-arm-none-eabi/arm-none-eabi/libc/usr/include

Macro definitions (option -D):
   __ACCUM_EPSILON__=0x1P-15K
   __ACCUM_FBIT__=15
   __ACCUM_IBIT__=16
   __ACCUM_MAX__=0X7FFFFFFFP-15K
   __ACCUM_MIN__=(-0X1P15K-0X1P15K)
   __APCS_32__=1
   __ARMEL__=1
   __ARM_32BIT_STATE=1
   __ARM_ARCH=4
   __ARM_ARCH_4T__=1
   __ARM_ARCH_ISA_ARM=1
   __ARM_ARCH_ISA_THUMB=1
   __ARM_EABI__=1
   __ARM_PCS=1
   __ARM_SIZEOF_MINIMAL_ENUM=1
   __ARM_SIZEOF_WCHAR_T=4
   __arm__=1
   __ATOMIC_ACQUIRE=2
   __ATOMIC_ACQ_REL=4
   __ATOMIC_CONSUME=1
   __ATOMIC_RELAXED=0
   __ATOMIC_RELEASE=3
   __ATOMIC_SEQ_CST=5
   __BIGGEST_ALIGNMENT__=8
   __BYTE_ORDER__=__ORDER_LITTLE_ENDIAN__
   __CHAR16_TYPE__=short unsigned int
   __CHAR32_TYPE__=long unsigned int
   __CHAR_BIT__=8
   __CHAR_UNSIGNED__=1
   __DA_FBIT__=31
   __DA_IBIT__=32
   __DBL_DECIMAL_DIG__=17
   __DBL_DENORM_MIN__=((double)4.9406564584124654e-324L)
   __DBL_DIG__=15
   __DBL_EPSILON__=((double)2.2204460492503131e-16L)
   __DBL_HAS_DENORM__=1
   __DBL_HAS_INFINITY__=1
   __DBL_HAS_QUIET_NAN__=1
   __DBL_MANT_DIG__=53
   __DBL_MAX_10_EXP__=308
   __DBL_MAX_EXP__=1024
   __DBL_MAX__=((double)1.7976931348623157e+308L)
   __DBL_MIN_10_EXP__=(-307)
   __DBL_MIN_EXP__=(-1021)
   __DBL_MIN__=((double)2.2250738585072014e-308L)
   __DEC128_EPSILON__=1E-33DL
   __DEC128_MANT_DIG__=34
   __DEC128_MAX_EXP__=6145
   __DEC128_MAX__=9.999999999999999999999999999999999E6144DL
   __DEC128_MIN_EXP__=(-6142)
   __DEC128_MIN__=1E-6143DL
   __DEC128_SUBNORMAL_MIN__=0.000000000000000000000000000000001E-6143DL
   __DEC32_EPSILON__=1E-6DF
   __DEC32_MANT_DIG__=7
   __DEC32_MAX_EXP__=97
   __DEC32_MAX__=9.999999E96DF
   __DEC32_MIN_EXP__=(-94)
   __DEC32_MIN__=1E-95DF
   __DEC32_SUBNORMAL_MIN__=0.000001E-95DF
   __DEC64_EPSILON__=1E-15DD
   __DEC64_MANT_DIG__=16
   __DEC64_MAX_EXP__=385
   __DEC64_MAX__=9.999999999999999E384DD
   __DEC64_MIN_EXP__=(-382)
   __DEC64_MIN__=1E-383DD
   __DEC64_SUBNORMAL_MIN__=0.000000000000001E-383DD
   __DECIMAL_DIG__=17
   __DEC_EVAL_METHOD__=2
   __DQ_FBIT__=63
   __DQ_IBIT__=0
   __ELF__=1
   __FINITE_MATH_ONLY__=0
   __FLOAT_WORD_ORDER__=__ORDER_LITTLE_ENDIAN__
   __FLT_DECIMAL_DIG__=9
   __FLT_DENORM_MIN__=1.4012984643248171e-45F
   __FLT_DIG__=6
   __FLT_EPSILON__=1.1920928955078125e-7F
   __FLT_EVAL_METHOD__=0
   __FLT_HAS_DENORM__=1
   __FLT_HAS_INFINITY__=1
   __FLT_HAS_QUIET_NAN__=1
   __FLT_MANT_DIG__=24
   __FLT_MAX_10_EXP__=38
   __FLT_MAX_EXP__=128
   __FLT_MAX__=3.4028234663852886e+38F
   __FLT_MIN_10_EXP__=(-37)
   __FLT_MIN_EXP__=(-125)
   __FLT_MIN__=1.1754943508222875e-38F
   __FLT_RADIX__=2
   __FRACT_EPSILON__=0x1P-15R
   __FRACT_FBIT__=15
   __FRACT_IBIT__=0
   __FRACT_MAX__=0X7FFFP-15R
   __FRACT_MIN__=(-0.5R-0.5R)
   __GCC_ATOMIC_BOOL_LOCK_FREE=1
   __GCC_ATOMIC_CHAR16_T_LOCK_FREE=1
   __GCC_ATOMIC_CHAR32_T_LOCK_FREE=1
   __GCC_ATOMIC_CHAR_LOCK_FREE=1
   __GCC_ATOMIC_INT_LOCK_FREE=1
   __GCC_ATOMIC_LLONG_LOCK_FREE=1
   __GCC_ATOMIC_LONG_LOCK_FREE=1
   __GCC_ATOMIC_POINTER_LOCK_FREE=1
   __GCC_ATOMIC_SHORT_LOCK_FREE=1
   __GCC_ATOMIC_TEST_AND_SET_TRUEVAL=1
   __GCC_ATOMIC_WCHAR_T_LOCK_FREE=1
   __GCC_IEC_559=0
   __GCC_IEC_559_COMPLEX=0
   __GNUC_MINOR__=2
   __GNUC_PATCHLEVEL__=1
   __GNUC_STDC_INLINE__=1
   __GNUC__=5
   __GXX_ABI_VERSION=1009
   __GXX_TYPEINFO_EQUALITY_INLINE=0
   __has_include(STR)=__has_include__(STR)
   __has_include_next(STR)=__has_include_next__(STR)
   __HA_FBIT__=7
   __HA_IBIT__=8
   __HQ_FBIT__=15
   __HQ_IBIT__=0
   __INT16_C(c)=c
   __INT16_MAX__=0x7fff
   __INT16_TYPE__=short int
   __INT32_C(c)=c ## L
   __INT32_MAX__=0x7fffffffL
   __INT32_TYPE__=long int
   __INT64_C(c)=c ## LL
   __INT64_MAX__=0x7fffffffffffffffLL
   __INT64_TYPE__=long long int
   __INT8_C(c)=c
   __INT8_MAX__=0x7f
   __INT8_TYPE__=signed char
   __INTMAX_C(c)=c ## LL
   __INTMAX_MAX__=0x7fffffffffffffffLL
   __INTMAX_TYPE__=long long int
   __INTPTR_MAX__=0x7fffffff
   __INTPTR_TYPE__=int
   __INT_FAST16_MAX__=0x7fffffff
   __INT_FAST16_TYPE__=int
   __INT_FAST32_MAX__=0x7fffffff
   __INT_FAST32_TYPE__=int
   __INT_FAST64_MAX__=0x7fffffffffffffffLL
   __INT_FAST64_TYPE__=long long int
   __INT_FAST8_MAX__=0x7fffffff
   __INT_FAST8_TYPE__=int
   __INT_LEAST16_MAX__=0x7fff
   __INT_LEAST16_TYPE__=short int
   __INT_LEAST32_MAX__=0x7fffffffL
   __INT_LEAST32_TYPE__=long int
   __INT_LEAST64_MAX__=0x7fffffffffffffffLL
   __INT_LEAST64_TYPE__=long long int
   __INT_LEAST8_MAX__=0x7f
   __INT_LEAST8_TYPE__=signed char
   __INT_MAX__=0x7fffffff
   __LACCUM_EPSILON__=0x1P-31LK
   __LACCUM_FBIT__=31
   __LACCUM_IBIT__=32
   __LACCUM_MAX__=0X7FFFFFFFFFFFFFFFP-31LK
   __LACCUM_MIN__=(-0X1P31LK-0X1P31LK)
   __LDBL_DENORM_MIN__=4.9406564584124654e-324L
   __LDBL_DIG__=15
   __LDBL_EPSILON__=2.2204460492503131e-16L
   __LDBL_HAS_DENORM__=1
   __LDBL_HAS_INFINITY__=1
   __LDBL_HAS_QUIET_NAN__=1
   __LDBL_MANT_DIG__=53
   __LDBL_MAX_10_EXP__=308
   __LDBL_MAX_EXP__=1024
   __LDBL_MAX__=1.7976931348623157e+308L
   __LDBL_MIN_10_EXP__=(-307)
   __LDBL_MIN_EXP__=(-1021)
   __LDBL_MIN__=2.2250738585072014e-308L
   __LFRACT_EPSILON__=0x1P-31LR
   __LFRACT_FBIT__=31
   __LFRACT_IBIT__=0
   __LFRACT_MAX__=0X7FFFFFFFP-31LR
   __LFRACT_MIN__=(-0.5LR-0.5LR)
   __LINARO_RELEASE__=201511
   __LINARO_SPIN__=2
   __LLACCUM_EPSILON__=0x1P-31LLK
   __LLACCUM_FBIT__=31
   __LLACCUM_IBIT__=32
   __LLACCUM_MAX__=0X7FFFFFFFFFFFFFFFP-31LLK
   __LLACCUM_MIN__=(-0X1P31LLK-0X1P31LLK)
   __LLFRACT_EPSILON__=0x1P-63LLR
   __LLFRACT_FBIT__=63
   __LLFRACT_IBIT__=0
   __LLFRACT_MAX__=0X7FFFFFFFFFFFFFFFP-63LLR
   __LLFRACT_MIN__=(-0.5LLR-0.5LLR)
   __LONG_LONG_MAX__=0x7fffffffffffffffLL
   __LONG_MAX__=0x7fffffffL
   __NO_INLINE__=1
   __ORDER_BIG_ENDIAN__=4321
   __ORDER_LITTLE_ENDIAN__=1234
   __ORDER_PDP_ENDIAN__=3412
   __PRAGMA_REDEFINE_EXTNAME=1
   __PTRDIFF_MAX__=0x7fffffff
   __PTRDIFF_TYPE__=int
   __QQ_FBIT__=7
   __QQ_IBIT__=0
   __REGISTER_PREFIX__=
   __SACCUM_EPSILON__=0x1P-7HK
   __SACCUM_FBIT__=7
   __SACCUM_IBIT__=8
   __SACCUM_MAX__=0X7FFFP-7HK
   __SACCUM_MIN__=(-0X1P7HK-0X1P7HK)
   __SA_FBIT__=15
   __SA_IBIT__=16
   __SCHAR_MAX__=0x7f
   __SFRACT_EPSILON__=0x1P-7HR
   __SFRACT_FBIT__=7
   __SFRACT_IBIT__=0
   __SFRACT_MAX__=0X7FP-7HR
   __SFRACT_MIN__=(-0.5HR-0.5HR)
   __SHRT_MAX__=0x7fff
   __SIG_ATOMIC_MAX__=0x7fffffff
   __SIG_ATOMIC_MIN__=(-__SIG_ATOMIC_MAX__ - 1)
   __SIG_ATOMIC_TYPE__=int
   __SIZEOF_DOUBLE__=8
   __SIZEOF_FLOAT__=4
   __SIZEOF_INT__=4
   __SIZEOF_LONG_DOUBLE__=8
   __SIZEOF_LONG_LONG__=8
   __SIZEOF_LONG__=4
   __SIZEOF_POINTER__=4
   __SIZEOF_PTRDIFF_T__=4
   __SIZEOF_SHORT__=2
   __SIZEOF_SIZE_T__=4
   __SIZEOF_WCHAR_T__=4
   __SIZEOF_WINT_T__=4
   __SIZE_MAX__=0xffffffffU
   __SIZE_TYPE__=unsigned int
   __SOFTFP__=1
   __SQ_FBIT__=31
   __SQ_IBIT__=0
   __STDC_HOSTED__=1
   __STDC_UTF_16__=1
   __STDC_UTF_32__=1
   __STDC_VERSION__=201112L
   __STDC__=1
   __TA_FBIT__=63
   __TA_IBIT__=64
   __THUMB_INTERWORK__=1
   __TQ_FBIT__=127
   __TQ_IBIT__=0
   __UACCUM_EPSILON__=0x1P-16UK
   __UACCUM_FBIT__=16
   __UACCUM_IBIT__=16
   __UACCUM_MAX__=0XFFFFFFFFP-16UK
   __UACCUM_MIN__=0.0UK
   __UDA_FBIT__=32
   __UDA_IBIT__=32
   __UDQ_FBIT__=64
   __UDQ_IBIT__=0
   __UFRACT_EPSILON__=0x1P-16UR
   __UFRACT_FBIT__=16
   __UFRACT_IBIT__=0
   __UFRACT_MAX__=0XFFFFP-16UR
   __UFRACT_MIN__=0.0UR
   __UHA_FBIT__=8
   __UHA_IBIT__=8
   __UHQ_FBIT__=16
   __UHQ_IBIT__=0
   __UINT16_C(c)=c
   __UINT16_MAX__=0xffff
   __UINT16_TYPE__=short unsigned int
   __UINT32_C(c)=c ## UL
   __UINT32_MAX__=0xffffffffUL
   __UINT32_TYPE__=long unsigned int
   __UINT64_C(c)=c ## ULL
   __UINT64_MAX__=0xffffffffffffffffULL
   __UINT64_TYPE__=long long unsigned int
   __UINT8_C(c)=c
   __UINT8_MAX__=0xff
   __UINT8_TYPE__=unsigned char
   __UINTMAX_C(c)=c ## ULL
   __UINTMAX_MAX__=0xffffffffffffffffULL
   __UINTMAX_TYPE__=long long unsigned int
   __UINTPTR_MAX__=0xffffffffU
   __UINTPTR_TYPE__=unsigned int
   __UINT_FAST16_MAX__=0xffffffffU
   __UINT_FAST16_TYPE__=unsigned int
   __UINT_FAST32_MAX__=0xffffffffU
   __UINT_FAST32_TYPE__=unsigned int
   __UINT_FAST64_MAX__=0xffffffffffffffffULL
   __UINT_FAST64_TYPE__=long long unsigned int
   __UINT_FAST8_MAX__=0xffffffffU
   __UINT_FAST8_TYPE__=unsigned int
   __UINT_LEAST16_MAX__=0xffff
   __UINT_LEAST16_TYPE__=short unsigned int
   __UINT_LEAST32_MAX__=0xffffffffUL
   __UINT_LEAST32_TYPE__=long unsigned int
   __UINT_LEAST64_MAX__=0xffffffffffffffffULL
   __UINT_LEAST64_TYPE__=long long unsigned int
   __UINT_LEAST8_MAX__=0xff
   __UINT_LEAST8_TYPE__=unsigned char
   __ULACCUM_EPSILON__=0x1P-32ULK
   __ULACCUM_FBIT__=32
   __ULACCUM_IBIT__=32
   __ULACCUM_MAX__=0XFFFFFFFFFFFFFFFFP-32ULK
   __ULACCUM_MIN__=0.0ULK
   __ULFRACT_EPSILON__=0x1P-32ULR
   __ULFRACT_FBIT__=32
   __ULFRACT_IBIT__=0
   __ULFRACT_MAX__=0XFFFFFFFFP-32ULR
   __ULFRACT_MIN__=0.0ULR
   __ULLACCUM_EPSILON__=0x1P-32ULLK
   __ULLACCUM_FBIT__=32
   __ULLACCUM_IBIT__=32
   __ULLACCUM_MAX__=0XFFFFFFFFFFFFFFFFP-32ULLK
   __ULLACCUM_MIN__=0.0ULLK
   __ULLFRACT_EPSILON__=0x1P-64ULLR
   __ULLFRACT_FBIT__=64
   __ULLFRACT_IBIT__=0
   __ULLFRACT_MAX__=0XFFFFFFFFFFFFFFFFP-64ULLR
   __ULLFRACT_MIN__=0.0ULLR
   __UQQ_FBIT__=8
   __UQQ_IBIT__=0
   __USACCUM_EPSILON__=0x1P-8UHK
   __USACCUM_FBIT__=8
   __USACCUM_IBIT__=8
   __USACCUM_MAX__=0XFFFFP-8UHK
   __USACCUM_MIN__=0.0UHK
   __USA_FBIT__=16
   __USA_IBIT__=16
   __USER_LABEL_PREFIX__=
   __USES_INITFINI__=1
   __USFRACT_EPSILON__=0x1P-8UHR
   __USFRACT_FBIT__=8
   __USFRACT_IBIT__=0
   __USFRACT_MAX__=0XFFP-8UHR
   __USFRACT_MIN__=0.0UHR
   __USQ_FBIT__=32
   __USQ_IBIT__=0
   __UTA_FBIT__=64
   __UTA_IBIT__=64
   __UTQ_FBIT__=128
   __UTQ_IBIT__=0
   __VERSION__="5.2.1 20151005"
   __VFP_FP__=1
   __WCHAR_MAX__=0xffffffffU
   __WCHAR_MIN__=0U
   __WCHAR_TYPE__=unsigned int
   __WINT_MAX__=0xffffffffU
   __WINT_MIN__=0U
   __WINT_TYPE__=unsigned int

Macro definitions (from language + headers in index):
   ASCII_CHAR_ACK=ASCII_CHAR_ACKNOWLEDGE
   ASCII_CHAR_ACKNOWLEDGE=0x06
   ASCII_CHAR_AMPERSAND=0x26
   ASCII_CHAR_APOSTROPHE=0x27
   ASCII_CHAR_ASTERISK=0x2A
   ASCII_CHAR_AT_SIGN=ASCII_CHAR_COMMERCIAL_AT
   ASCII_CHAR_BACKSPACE=0x08
   ASCII_CHAR_BEL=ASCII_CHAR_BELL
   ASCII_CHAR_BELL=0x07
   ASCII_CHAR_BRACKET_CURLY_LEFT=ASCII_CHAR_LEFT_CURLY_BRACKET
   ASCII_CHAR_BRACKET_CURLY_RIGHT=ASCII_CHAR_RIGHT_CURLY_BRACKET
   ASCII_CHAR_BRACKET_SQUARE_LEFT=ASCII_CHAR_LEFT_SQUARE_BRACKET
   ASCII_CHAR_BRACKET_SQUARE_RIGHT=ASCII_CHAR_RIGHT_SQUARE_BRACKET
   ASCII_CHAR_BS=ASCII_CHAR_BACKSPACE
   ASCII_CHAR_CAN=ASCII_CHAR_CANCEL
   ASCII_CHAR_CANCEL=0x18
   ASCII_CHAR_CARRIAGE_RETURN=0x0D
   ASCII_CHAR_CHARACTER_TABULATION=0x09
   ASCII_CHAR_CIRCUMFLEX_ACCENT=0x5E
   ASCII_CHAR_COLON=0x3A
   ASCII_CHAR_COMMA=0x2C
   ASCII_CHAR_COMMERCIAL_AT=0x40
   ASCII_CHAR_CR=ASCII_CHAR_CARRIAGE_RETURN
   ASCII_CHAR_DATA_LINK_ESCAPE=0x10
   ASCII_CHAR_DC1=ASCII_CHAR_DEVICE_CONTROL_ONE
   ASCII_CHAR_DC2=ASCII_CHAR_DEVICE_CONTROL_TWO
   ASCII_CHAR_DC3=ASCII_CHAR_DEVICE_CONTROL_THREE
   ASCII_CHAR_DC4=ASCII_CHAR_DEVICE_CONTROL_FOUR
   ASCII_CHAR_DEL=ASCII_CHAR_DELETE
   ASCII_CHAR_DELETE=0x7F
   ASCII_CHAR_DEVICE_CONTROL_FOUR=0x14
   ASCII_CHAR_DEVICE_CONTROL_ONE=0x11
   ASCII_CHAR_DEVICE_CONTROL_THREE=0x13
   ASCII_CHAR_DEVICE_CONTROL_TWO=0x12
   ASCII_CHAR_DEV_CTRL_FOUR=ASCII_CHAR_DEVICE_CONTROL_FOUR
   ASCII_CHAR_DEV_CTRL_ONE=ASCII_CHAR_DEVICE_CONTROL_ONE
   ASCII_CHAR_DEV_CTRL_THREE=ASCII_CHAR_DEVICE_CONTROL_THREE
   ASCII_CHAR_DEV_CTRL_TWO=ASCII_CHAR_DEVICE_CONTROL_TWO
   ASCII_CHAR_DIGIT_EIGHT=0x38
   ASCII_CHAR_DIGIT_FIVE=0x35
   ASCII_CHAR_DIGIT_FOUR=0x34
   ASCII_CHAR_DIGIT_NINE=0x39
   ASCII_CHAR_DIGIT_ONE=0x31
   ASCII_CHAR_DIGIT_SEVEN=0x37
   ASCII_CHAR_DIGIT_SIX=0x36
   ASCII_CHAR_DIGIT_THREE=0x33
   ASCII_CHAR_DIGIT_TWO=0x32
   ASCII_CHAR_DIGIT_ZERO=0x30
   ASCII_CHAR_DIG_EIGHT=ASCII_CHAR_DIGIT_EIGHT
   ASCII_CHAR_DIG_FIVE=ASCII_CHAR_DIGIT_FIVE
   ASCII_CHAR_DIG_FOUR=ASCII_CHAR_DIGIT_FOUR
   ASCII_CHAR_DIG_NINE=ASCII_CHAR_DIGIT_NINE
   ASCII_CHAR_DIG_ONE=ASCII_CHAR_DIGIT_ONE
   ASCII_CHAR_DIG_SEVEN=ASCII_CHAR_DIGIT_SEVEN
   ASCII_CHAR_DIG_SIX=ASCII_CHAR_DIGIT_SIX
   ASCII_CHAR_DIG_THREE=ASCII_CHAR_DIGIT_THREE
   ASCII_CHAR_DIG_TWO=ASCII_CHAR_DIGIT_TWO
   ASCII_CHAR_DIG_ZERO=ASCII_CHAR_DIGIT_ZERO
   ASCII_CHAR_DLE=ASCII_CHAR_DATA_LINK_ESCAPE
   ASCII_CHAR_DOLLAR_SIGN=0x24
   ASCII_CHAR_EM=ASCII_CHAR_END_OF_MEDIUM
   ASCII_CHAR_END_MEDIUM=ASCII_CHAR_END_OF_MEDIUM
   ASCII_CHAR_END_OF_MEDIUM=0x19
   ASCII_CHAR_END_OF_TEXT=0x03
   ASCII_CHAR_END_OF_TRANSMISSION=0x04
   ASCII_CHAR_END_OF_TRANSMISSION_BLOCK=0x17
   ASCII_CHAR_END_TEXT=ASCII_CHAR_END_OF_TEXT
   ASCII_CHAR_END_TRANSMISSION=ASCII_CHAR_END_OF_TRANSMISSION
   ASCII_CHAR_END_TRANSMISSION_BLK=ASCII_CHAR_END_OF_TRANSMISSION_BLOCK
   ASCII_CHAR_ENQ=ASCII_CHAR_ENQUIRY
   ASCII_CHAR_ENQUIRY=0x05
   ASCII_CHAR_EOT=ASCII_CHAR_END_OF_TRANSMISSION
   ASCII_CHAR_EQUALS_SIGN=0x3D
   ASCII_CHAR_ESC=ASCII_CHAR_ESCAPE
   ASCII_CHAR_ESCAPE=0x1B
   ASCII_CHAR_ETB=ASCII_CHAR_END_OF_TRANSMISSION_BLOCK
   ASCII_CHAR_ETX=ASCII_CHAR_END_OF_TEXT
   ASCII_CHAR_EXCLAMATION_MARK=0x21
   ASCII_CHAR_FF=ASCII_CHAR_FORM_FEED
   ASCII_CHAR_FORM_FEED=0x0C
   ASCII_CHAR_FULL_STOP=0x2E
   ASCII_CHAR_GRAVE_ACCENT=0x60
   ASCII_CHAR_GREATER_THAN_SIGN=0x3E
   ASCII_CHAR_HT=ASCII_CHAR_CHARACTER_TABULATION
   ASCII_CHAR_HYPHEN_MINUS=0x2D
   ASCII_CHAR_INFO_SEPARATOR_FOUR=0x1C
   ASCII_CHAR_INFO_SEPARATOR_ONE=0x1F
   ASCII_CHAR_INFO_SEPARATOR_THREE=0x1D
   ASCII_CHAR_INFO_SEPARATOR_TWO=0x1E
   ASCII_CHAR_IS1=ASCII_CHAR_INFO_SEPARATOR_ONE
   ASCII_CHAR_IS2=ASCII_CHAR_INFO_SEPARATOR_TWO
   ASCII_CHAR_IS3=ASCII_CHAR_INFO_SEPARATOR_THREE
   ASCII_CHAR_IS4=ASCII_CHAR_INFO_SEPARATOR_FOUR
   ASCII_CHAR_LATIN_LOWER_A=0x61
   ASCII_CHAR_LATIN_LOWER_B=0x62
   ASCII_CHAR_LATIN_LOWER_C=0x63
   ASCII_CHAR_LATIN_LOWER_D=0x64
   ASCII_CHAR_LATIN_LOWER_E=0x65
   ASCII_CHAR_LATIN_LOWER_F=0x66
   ASCII_CHAR_LATIN_LOWER_G=0x67
   ASCII_CHAR_LATIN_LOWER_H=0x68
   ASCII_CHAR_LATIN_LOWER_I=0x69
   ASCII_CHAR_LATIN_LOWER_J=0x6A
   ASCII_CHAR_LATIN_LOWER_K=0x6B
   ASCII_CHAR_LATIN_LOWER_L=0x6C
   ASCII_CHAR_LATIN_LOWER_M=0x6D
   ASCII_CHAR_LATIN_LOWER_N=0x6E
   ASCII_CHAR_LATIN_LOWER_O=0x6F
   ASCII_CHAR_LATIN_LOWER_P=0x70
   ASCII_CHAR_LATIN_LOWER_Q=0x71
   ASCII_CHAR_LATIN_LOWER_R=0x72
   ASCII_CHAR_LATIN_LOWER_S=0x73
   ASCII_CHAR_LATIN_LOWER_T=0x74
   ASCII_CHAR_LATIN_LOWER_U=0x75
   ASCII_CHAR_LATIN_LOWER_V=0x76
   ASCII_CHAR_LATIN_LOWER_W=0x77
   ASCII_CHAR_LATIN_LOWER_X=0x78
   ASCII_CHAR_LATIN_LOWER_Y=0x79
   ASCII_CHAR_LATIN_LOWER_Z=0x7A
   ASCII_CHAR_LATIN_UPPER_A=0x41
   ASCII_CHAR_LATIN_UPPER_B=0x42
   ASCII_CHAR_LATIN_UPPER_C=0x43
   ASCII_CHAR_LATIN_UPPER_D=0x44
   ASCII_CHAR_LATIN_UPPER_E=0x45
   ASCII_CHAR_LATIN_UPPER_F=0x46
   ASCII_CHAR_LATIN_UPPER_G=0x47
   ASCII_CHAR_LATIN_UPPER_H=0x48
   ASCII_CHAR_LATIN_UPPER_I=0x49
   ASCII_CHAR_LATIN_UPPER_J=0x4A
   ASCII_CHAR_LATIN_UPPER_K=0x4B
   ASCII_CHAR_LATIN_UPPER_L=0x4C
   ASCII_CHAR_LATIN_UPPER_M=0x4D
   ASCII_CHAR_LATIN_UPPER_N=0x4E
   ASCII_CHAR_LATIN_UPPER_O=0x4F
   ASCII_CHAR_LATIN_UPPER_P=0x50
   ASCII_CHAR_LATIN_UPPER_Q=0x51
   ASCII_CHAR_LATIN_UPPER_R=0x52
   ASCII_CHAR_LATIN_UPPER_S=0x53
   ASCII_CHAR_LATIN_UPPER_T=0x54
   ASCII_CHAR_LATIN_UPPER_U=0x55
   ASCII_CHAR_LATIN_UPPER_V=0x56
   ASCII_CHAR_LATIN_UPPER_W=0x57
   ASCII_CHAR_LATIN_UPPER_X=0x58
   ASCII_CHAR_LATIN_UPPER_Y=0x59
   ASCII_CHAR_LATIN_UPPER_Z=0x5A
   ASCII_CHAR_LEFT_CURLY_BRACKET=0x7B
   ASCII_CHAR_LEFT_PARENTHESIS=0x28
   ASCII_CHAR_LEFT_SQUARE_BRACKET=0x5B
   ASCII_CHAR_LESS_THAN_SIGN=0x3C
   ASCII_CHAR_LF=ASCII_CHAR_LINE_FEED
   ASCII_CHAR_LINE_FEED=0x0A
   ASCII_CHAR_LINE_TABULATION=0x0B
   ASCII_CHAR_LOW_LINE=0x5F
   ASCII_CHAR_NAK=ASCII_CHAR_NEGATIVE_ACKNOWLEDGE
   ASCII_CHAR_NEGATIVE_ACKNOWLEDGE=0x15
   ASCII_CHAR_NEG_ACK=ASCII_CHAR_NEGATIVE_ACKNOWLEDGE
   ASCII_CHAR_NUL=ASCII_CHAR_NULL
   ASCII_CHAR_NULL=0x00
   ASCII_CHAR_NUMBER_SIGN=0x23
   ASCII_CHAR_PAREN_LEFT=ASCII_CHAR_LEFT_PARENTHESIS
   ASCII_CHAR_PAREN_RIGHT=ASCII_CHAR_RIGHT_PARENTHESIS
   ASCII_CHAR_PERCENTAGE_SIGN=0x25
   ASCII_CHAR_PLUS_SIGN=0x2B
   ASCII_CHAR_QUESTION_MARK=0x3F
   ASCII_CHAR_QUOTATION_MARK=0x22
   ASCII_CHAR_REVERSE_SOLIDUS=0x5C
   ASCII_CHAR_RIGHT_CURLY_BRACKET=0x7D
   ASCII_CHAR_RIGHT_PARENTHESIS=0x29
   ASCII_CHAR_RIGHT_SQUARE_BRACKET=0x5D
   ASCII_CHAR_SEMICOLON=0x3B
   ASCII_CHAR_SHIFT_IN=0x0F
   ASCII_CHAR_SHIFT_OUT=0x0E
   ASCII_CHAR_SI=ASCII_CHAR_SHIFT_IN
   ASCII_CHAR_SO=ASCII_CHAR_SHIFT_OUT
   ASCII_CHAR_SOH=ASCII_CHAR_START_OF_HEADING
   ASCII_CHAR_SOLIDUS=0x2F
   ASCII_CHAR_SPACE=0x20
   ASCII_CHAR_START_HEADING=ASCII_CHAR_START_OF_HEADING
   ASCII_CHAR_START_OF_HEADING=0x01
   ASCII_CHAR_START_OF_TEXT=0x02
   ASCII_CHAR_START_TEXT=ASCII_CHAR_START_OF_TEXT
   ASCII_CHAR_STX=ASCII_CHAR_START_OF_TEXT
   ASCII_CHAR_SUB=ASCII_CHAR_SUBSITUTE
   ASCII_CHAR_SUBSITUTE=0x1A
   ASCII_CHAR_SYN=ASCII_CHAR_SYNCHRONOUS_IDLE
   ASCII_CHAR_SYNCHRONOUS_IDLE=0x16
   ASCII_CHAR_SYNC_IDLE=ASCII_CHAR_SYNCHRONOUS_IDLE
   ASCII_CHAR_TAB=ASCII_CHAR_CHARACTER_TABULATION
   ASCII_CHAR_TILDE=0x7E
   ASCII_CHAR_VERTICAL_LINE=0x7C
   ASCII_CHAR_VT=ASCII_CHAR_LINE_TABULATION
   ASCII_IS_ALPHA(c)=((((ASCII_IS_UPPER(c)) == DEF_YES) || ((ASCII_IS_LOWER(c)) == DEF_YES)) ? (DEF_YES) : (DEF_NO))
   ASCII_IS_ALPHA_NUM(c)=((((ASCII_IS_ALPHA(c)) == DEF_YES) || ((ASCII_IS_DIG (c)) == DEF_YES)) ? (DEF_YES) : (DEF_NO))
   ASCII_IS_BLANK(c)=((((c) == ASCII_CHAR_SPACE) || ((c) == ASCII_CHAR_HT)) ? (DEF_YES) : (DEF_NO))
   ASCII_IS_CTRL(c)=(((((CPU_INT08S)(c) >= ASCII_CHAR_NULL ) && ((c) <= ASCII_CHAR_IS1)) || ((c) == ASCII_CHAR_DEL)) ? (DEF_YES) : (DEF_NO))
   ASCII_IS_DIG(c)=((((c) >= ASCII_CHAR_DIG_ZERO) && ((c) <= ASCII_CHAR_DIG_NINE)) ? (DEF_YES) : (DEF_NO))
   ASCII_IS_DIG_HEX(c)=(((((c) >= ASCII_CHAR_DIG_ZERO ) && ((c) <= ASCII_CHAR_DIG_NINE )) || (((c) >= ASCII_CHAR_LATIN_UPPER_A) && ((c) <= ASCII_CHAR_LATIN_UPPER_F)) || (((c) >= ASCII_CHAR_LATIN_LOWER_A) && ((c) <= ASCII_CHAR_LATIN_LOWER_F))) ? (DEF_YES) : (DEF_NO))
   ASCII_IS_DIG_OCT(c)=((((c) >= ASCII_CHAR_DIG_ZERO) && ((c) <= ASCII_CHAR_DIG_SEVEN)) ? (DEF_YES) : (DEF_NO))
   ASCII_IS_GRAPH(c)=((((c) >= ASCII_CHAR_EXCLAMATION_MARK) && ((c) <= ASCII_CHAR_TILDE)) ? (DEF_YES) : (DEF_NO))
   ASCII_IS_LOWER(c)=((((c) >= ASCII_CHAR_LATIN_LOWER_A) && ((c) <= ASCII_CHAR_LATIN_LOWER_Z)) ? (DEF_YES) : (DEF_NO))
   ASCII_IS_PRINT(c)=((((c) >= ASCII_CHAR_SPACE) && ((c) <= ASCII_CHAR_TILDE)) ? (DEF_YES) : (DEF_NO))
   ASCII_IS_PUNCT(c)=((((ASCII_IS_PRINT(c)) == DEF_YES) && ((ASCII_IS_SPACE(c)) == DEF_NO ) && ((ASCII_IS_ALPHA_NUM(c)) == DEF_NO )) ? (DEF_YES) : (DEF_NO))
   ASCII_IS_SPACE(c)=((((c) == ASCII_CHAR_SPACE) || ((c) == ASCII_CHAR_CR) || ((c) == ASCII_CHAR_LF ) || ((c) == ASCII_CHAR_FF) || ((c) == ASCII_CHAR_HT ) || ((c) == ASCII_CHAR_VT)) ? (DEF_YES) : (DEF_NO))
   ASCII_IS_UPPER(c)=((((c) >= ASCII_CHAR_LATIN_UPPER_A) && ((c) <= ASCII_CHAR_LATIN_UPPER_Z)) ? (DEF_YES) : (DEF_NO))
   ASCII_TO_LOWER(c)=(((ASCII_IS_UPPER(c)) == DEF_YES) ? ((c) + (ASCII_CHAR_LATIN_LOWER_A - ASCII_CHAR_LATIN_UPPER_A)) : (c))
   ASCII_TO_UPPER(c)=(((ASCII_IS_LOWER(c)) == DEF_YES) ? ((c) - (ASCII_CHAR_LATIN_LOWER_A - ASCII_CHAR_LATIN_UPPER_A)) : (c))
   BUFSIZ=1024
   clearerr(p)=__sclearerr(p)
   clz(arg)=({u8 rval; __asm__ __volatile__( "clz	%0,%1" : "=r" (rval) : "r" (arg) ); rval; })
   cpsidf()=__asm__ __volatile__("cpsid	f\n")
   cpsidi()=__asm__ __volatile__("cpsid	i\n")
   cpsief()=__asm__ __volatile__("cpsie	f\n")
   cpsiei()=__asm__ __volatile__("cpsie	i\n")
   CPU_ARM_BIT_CPSR_A=DEF_BIT_08
   CPU_ARM_BIT_CPSR_C=DEF_BIT_29
   CPU_ARM_BIT_CPSR_E=DEF_BIT_09
   CPU_ARM_BIT_CPSR_F=DEF_BIT_06
   CPU_ARM_BIT_CPSR_I=DEF_BIT_07
   CPU_ARM_BIT_CPSR_J=DEF_BIT_24
   CPU_ARM_BIT_CPSR_MODE_ABORT=0x17u
   CPU_ARM_BIT_CPSR_MODE_FIQ=0x11u
   CPU_ARM_BIT_CPSR_MODE_IRQ=0x12u
   CPU_ARM_BIT_CPSR_MODE_SUPERVISOR=0x13u
   CPU_ARM_BIT_CPSR_MODE_SYSTEM=0x1Fu
   CPU_ARM_BIT_CPSR_MODE_UNDEFINED=0x1Bu
   CPU_ARM_BIT_CPSR_MODE_USER=0x10u
   CPU_ARM_BIT_CPSR_N=DEF_BIT_31
   CPU_ARM_BIT_CPSR_Q=DEF_BIT_27
   CPU_ARM_BIT_CPSR_T=DEF_BIT_05
   CPU_ARM_BIT_CPSR_V=DEF_BIT_28
   CPU_ARM_BIT_CPSR_Z=DEF_BIT_30
   CPU_ARM_BIT_FPEXC_EN=DEF_BIT_30
   CPU_ARM_EVENT_ATCM_ERR_BIT=0x67u
   CPU_ARM_EVENT_ATCM_ERR_PAR=0x64u
   CPU_ARM_EVENT_AXI_NON_CACHE_ACCESS=0x57u
   CPU_ARM_EVENT_B0TCM_ERR_BIT=0x68u
   CPU_ARM_EVENT_B1TCM_ERR_BIT=0x69u
   CPU_ARM_EVENT_B1TCM_ERR_PAR=0x66u
   CPU_ARM_EVENT_BOTCM_ERR_PAR=0x65u
   CPU_ARM_EVENT_BRANCH_MISPREDICTED=0x10u
   CPU_ARM_EVENT_BRANCH_PREDICTED=0x12u
   CPU_ARM_EVENT_CTX_ID_CHANGE=0x0Bu
   CPU_ARM_EVENT_CYCLE_CNT=0x11u
   CPU_ARM_EVENT_DATA_CACHE_ACCESS=0x04u
   CPU_ARM_EVENT_DATA_CACHE_DATA_ERR=0x4Du
   CPU_ARM_EVENT_DATA_CACHE_DATA_FATAL_ERR=0x60u
   CPU_ARM_EVENT_DATA_CACHE_MISS=0x03u
   CPU_ARM_EVENT_DATA_CACHE_TAG_ERR=0x4Cu
   CPU_ARM_EVENT_DATA_CACHE_TAG_FATAL_ERR=0x61u
   CPU_ARM_EVENT_DATA_CACHE_WR_BACK=0x42u
   CPU_ARM_EVENT_DATA_READ=0x06u
   CPU_ARM_EVENT_DATA_WRITE=0x07u
   CPU_ARM_EVENT_DUAL_ISSUE_BRANCH=0x5Au
   CPU_ARM_EVENT_DUAL_ISSUE_LOAD_STORE=0x5Bu
   CPU_ARM_EVENT_DUAL_ISSUE_OTHER=0x5Cu
   CPU_ARM_EVENT_EXCEPT_RETURN=0x0Au
   CPU_ARM_EVENT_EXCEPT_TAKEN=0x09u
   CPU_ARM_EVENT_EXT_MEM_REQ=0x43u
   CPU_ARM_EVENT_FIQ_INT_DIS=0x46u
   CPU_ARM_EVENT_INSTR_FP_EXEC=0x5Du
   CPU_ARM_EVENT_INSTR_INT_DIV_EXEC=0x53u
   CPU_ARM_EVENT_INSTR_PLD_LINE_FILL=0x55u
   CPU_ARM_EVENT_INSTR_PLD_LINE_FILL_STOP=0x56u
   CPU_ARM_EVENT_INST_BRANCH_EXECUTED=0x0Du
   CPU_ARM_EVENT_INST_BUFFER_STALL=0x40u
   CPU_ARM_EVENT_INST_CACHE_DATA_ERR=0x4Bu
   CPU_ARM_EVENT_INST_CACHE_MISS=0x01u
   CPU_ARM_EVENT_INST_CACHE_TAG_ERR=0x4Au
   CPU_ARM_EVENT_INST_DUAL_ISSUED=0x5Eu
   CPU_ARM_EVENT_INST_EXECUTED=0x08u
   CPU_ARM_EVENT_INST_RETURN_EXECUTED=0x0Eu
   CPU_ARM_EVENT_IRQ_INT_DIS=0x47u
   CPU_ARM_EVENT_LIVELOCK=0x62u
   CPU_ARM_EVENT_LSU_STALL_BUF_FULL=0x51u
   CPU_ARM_EVENT_LSU_STALL_BUSY=0x44u
   CPU_ARM_EVENT_LSU_STALL_Q_FULL=0x52u
   CPU_ARM_EVENT_SOFT_INC=0x00u
   CPU_ARM_EVENT_SOFT_PC_CHANGE=0x0Cu
   CPU_ARM_EVENT_STALL_CYCLE_INT_DIV=0x54u
   CPU_ARM_EVENT_STO_CACHE_LINE=0x59u
   CPU_ARM_EVENT_STO_FORCE_DRAIN=0x45u
   CPU_ARM_EVENT_STO_MERGE=0x50u
   CPU_ARM_EVENT_TCM_ERR_AXI=0x6Du
   CPU_ARM_EVENT_TCM_ERR_AXI_FATAL=0x6Cu
   CPU_ARM_EVENT_TCM_ERR_LOAD_STORE=0x6Au
   CPU_ARM_EVENT_TCM_ERR_PAR_LOAD_STORE_FATAL=0x4Fu
   CPU_ARM_EVENT_TCM_ERR_PAR_PREFETCH_FATAL=0x4Eu
   CPU_ARM_EVENT_TCM_ERR_PREFETCH=0x6Bu
   CPU_ARM_EVENT_UNALIGN_ACCESS=0x0Fu
   CPU_ARM_EXCEPT_ABORT_DATA=4u
   CPU_ARM_EXCEPT_ABORT_PREFETCH=3u
   CPU_ARM_EXCEPT_FIQ=7u
   CPU_ARM_EXCEPT_IRQ=6u
   CPU_ARM_EXCEPT_RST=0u
   CPU_ARM_EXCEPT_RSVD=5u
   CPU_ARM_EXCEPT_SWI=2u
   CPU_ARM_EXCEPT_UND=1u
   CPU_ARM_MMU_ACCESS_EXECUTE_NEVER=DEF_BIT_12
   CPU_ARM_MMU_ACCESS_PERM_NO_ACCESS=DEF_BIT_MASK(0u, 8u)
   CPU_ARM_MMU_ACCESS_PERM_PRIV_FULL=DEF_BIT_MASK(1u, 8u)
   CPU_ARM_MMU_ACCESS_PERM_PRIV_RD=DEF_BIT_MASK(5u, 8u)
   CPU_ARM_MMU_ACCESS_PERM_PRIV_USER_RD=DEF_BIT_MASK(6u, 8u)
   CPU_ARM_MMU_ACCESS_PERM_RSVD_00=DEF_BIT_MASK(0u, 8u)
   CPU_ARM_MMU_ACCESS_PERM_RSVD_01=DEF_BIT_MASK(7u, 8u)
   CPU_ARM_MMU_ACCESS_PERM_USER_FULL=DEF_BIT_MASK(3u, 8u)
   CPU_ARM_MMU_ACCESS_PERM_USER_RD=DEF_BIT_MASK(2u, 8u)
   CPU_ARM_MMU_ACCESS_REG_BIT_B=DEF_BIT_00
   CPU_ARM_MMU_ACCESS_REG_BIT_C=DEF_BIT_01
   CPU_ARM_MMU_ACCESS_REG_BIT_TEX_0=DEF_BIT_03
   CPU_ARM_MMU_ACCESS_REG_BIT_TEX_1=DEF_BIT_04
   CPU_ARM_MMU_ACCESS_REG_BIT_TEX_2=DEF_BIT_05
   CPU_ARM_MMU_ACCESS_SHARE=DEF_BIT_02
   CPU_ARM_MMU_ACCESS_TYPE_DEV=(CPU_ARM_MMU_ACCESS_REG_BIT_TEX_1 )
   CPU_ARM_MMU_ACCESS_TYPE_DEV_SHARED=( CPU_ARM_MMU_ACCESS_REG_BIT_B)
   CPU_ARM_MMU_ACCESS_TYPE_NORMAL_CACHE(inner,outer)=(CPU_ARM_MMU_ACCESS_REG_BIT_TEX_2 | ((inner << 3u)) | (outer))
   CPU_ARM_MMU_ACCESS_TYPE_NORMAL_CACHE_OPT_NONE=DEF_BIT_NONE
   CPU_ARM_MMU_ACCESS_TYPE_NORMAL_CACHE_OPT_WB=(DEF_BIT_00 | DEF_BIT_01)
   CPU_ARM_MMU_ACCESS_TYPE_NORMAL_CACHE_OPT_WBA=DEF_BIT_00
   CPU_ARM_MMU_ACCESS_TYPE_NORMAL_CACHE_OPT_WT=DEF_BIT_01
   CPU_ARM_MMU_ACCESS_TYPE_NORMAL_OI_NONE=(CPU_ARM_MMU_ACCESS_REG_BIT_TEX_0 )
   CPU_ARM_MMU_ACCESS_TYPE_NORMAL_OI_WB=( CPU_ARM_MMU_ACCESS_REG_BIT_C | CPU_ARM_MMU_ACCESS_REG_BIT_B)
   CPU_ARM_MMU_ACCESS_TYPE_NORMAL_OI_WBA=(CPU_ARM_MMU_ACCESS_REG_BIT_TEX_0 | CPU_ARM_MMU_ACCESS_REG_BIT_C | CPU_ARM_MMU_ACCESS_REG_BIT_B)
   CPU_ARM_MMU_ACCESS_TYPE_NORMAL_OI_WT=( CPU_ARM_MMU_ACCESS_REG_BIT_C )
   CPU_ARM_MMU_ACCESS_TYPE_STRONG_ORDERED=DEF_BIT_NONE
   CPU_ARM_MSK_CPSR_GE=DEF_BIT_FIELD(4u, 16u)
   CPU_ARM_MSK_CPSR_MODE=DEF_BIT_FIELD(5u, 0u)
   CPU_CFG_ADDR_SIZE=CPU_WORD_SIZE_32
   CPU_CFG_CACHE_MGMT_EN=DEF_DISABLED
   CPU_CFG_CRITICAL_METHOD=CPU_CRITICAL_METHOD_STATUS_LOCAL
   CPU_CFG_DATA_SIZE=CPU_WORD_SIZE_32
   CPU_CFG_DATA_SIZE_MAX=CPU_WORD_SIZE_64
   CPU_CFG_ENDIAN_TYPE=CPU_ENDIAN_TYPE_LITTLE
   CPU_CFG_INT_DIS_MEAS_OVRHD_NBR=1u
   CPU_CFG_LEAD_ZEROS_ASM_PRESENT=
   CPU_CFG_MODULE_PRESENT=
   CPU_CFG_NAME_EN=DEF_DISABLED
   CPU_CFG_NAME_SIZE=16
   CPU_CFG_STK_ALIGN_BYTES=(8u)
   CPU_CFG_STK_GROWTH=CPU_STK_GROWTH_HI_TO_LO
   CPU_CFG_TS_32_EN=DEF_DISABLED
   CPU_CFG_TS_64_EN=DEF_DISABLED
   CPU_CFG_TS_EN=DEF_DISABLED
   CPU_CFG_TS_TMR_EN=DEF_DISABLED
   CPU_CFG_TS_TMR_SIZE=CPU_WORD_SIZE_32
   CPU_CORE_EXT=extern
   CPU_CORE_MODULE_PRESENT=
   CPU_CORE_VERSION=13002u
   CPU_CRITICAL_ENTER()=do { CPU_INT_DIS(); } while (0)
   CPU_CRITICAL_EXIT()=do { CPU_INT_EN(); } while (0)
   CPU_CRITICAL_METHOD_INT_DIS_EN=1u
   CPU_CRITICAL_METHOD_NONE=0u
   CPU_CRITICAL_METHOD_STATUS_LOCAL=3u
   CPU_CRITICAL_METHOD_STATUS_STK=2u
   CPU_DEF_MODULE_PRESENT=
   CPU_ENDIAN_TYPE_BIG=1u
   CPU_ENDIAN_TYPE_LITTLE=2u
   CPU_ENDIAN_TYPE_NONE=0u
   CPU_INT_DIS()=do { cpu_sr = CPU_SR_Save(); } while (0)
   CPU_INT_EN()=do { CPU_SR_Restore(cpu_sr); } while (0)
   CPU_MB()=__asm__ __volatile__ ("dsb" : : : "memory")
   CPU_MODULE_PRESENT=
   CPU_RMB()=__asm__ __volatile__ ("dsb" : : : "memory")
   CPU_SR_ALLOC()=CPU_SR cpu_sr = (CPU_SR)0
   CPU_STK_GROWTH_HI_TO_LO=2u
   CPU_STK_GROWTH_LO_TO_HI=1u
   CPU_STK_GROWTH_NONE=0u
   CPU_SW_EXCEPTION(err_rtn_val)=do { CPU_SW_Exception(); } while (0)
   CPU_TIME_MEAS_NBR_MAX=128u
   CPU_TIME_MEAS_NBR_MIN=1u
   CPU_TYPE_CREATE(char_1,char_2,char_3,char_4)=(((CPU_INT32U)((CPU_INT08U)(char_1))) | ((CPU_INT32U)((CPU_INT08U)(char_2)) << (1u * DEF_OCTET_NBR_BITS)) | ((CPU_INT32U)((CPU_INT08U)(char_3)) << (2u * DEF_OCTET_NBR_BITS)) | ((CPU_INT32U)((CPU_INT08U)(char_4)) << (3u * DEF_OCTET_NBR_BITS)))
   CPU_VAL_IGNORED(val)=CPU_VAL_UNUSED(val)
   CPU_VAL_UNUSED(val)=((void)&(val));
   CPU_WMB()=__asm__ __volatile__ ("dsb" : : : "memory")
   CPU_WORD_SIZE_08=1u
   CPU_WORD_SIZE_16=2u
   CPU_WORD_SIZE_32=4u
   CPU_WORD_SIZE_64=8u
   DATA_SYNC=dsb()
   DEF_ABS(a)=(((a) < 0) ? (-(a)) : (a))
   DEF_ACTIVE=1u
   DEF_ALIGN_MAX_NBR_OCTETS=4096u
   DEF_BIT(bit)=(1u << (bit))
   DEF_BIT08(bit)=((CPU_INT08U)((CPU_INT08U)1u << (bit)))
   DEF_BIT16(bit)=((CPU_INT16U)((CPU_INT16U)1u << (bit)))
   DEF_BIT32(bit)=((CPU_INT32U)((CPU_INT32U)1u << (bit)))
   DEF_BIT64(bit)=((CPU_INT64U)((CPU_INT64U)1u << (bit)))
   DEF_BIT_00=0x01u
   DEF_BIT_01=0x02u
   DEF_BIT_02=0x04u
   DEF_BIT_03=0x08u
   DEF_BIT_04=0x10u
   DEF_BIT_05=0x20u
   DEF_BIT_06=0x40u
   DEF_BIT_07=0x80u
   DEF_BIT_08=0x0100u
   DEF_BIT_09=0x0200u
   DEF_BIT_10=0x0400u
   DEF_BIT_11=0x0800u
   DEF_BIT_12=0x1000u
   DEF_BIT_13=0x2000u
   DEF_BIT_14=0x4000u
   DEF_BIT_15=0x8000u
   DEF_BIT_16=0x00010000u
   DEF_BIT_17=0x00020000u
   DEF_BIT_18=0x00040000u
   DEF_BIT_19=0x00080000u
   DEF_BIT_20=0x00100000u
   DEF_BIT_21=0x00200000u
   DEF_BIT_22=0x00400000u
   DEF_BIT_23=0x00800000u
   DEF_BIT_24=0x01000000u
   DEF_BIT_25=0x02000000u
   DEF_BIT_26=0x04000000u
   DEF_BIT_27=0x08000000u
   DEF_BIT_28=0x10000000u
   DEF_BIT_29=0x20000000u
   DEF_BIT_30=0x40000000u
   DEF_BIT_31=0x80000000u
   DEF_BIT_32=0x0000000100000000u
   DEF_BIT_33=0x0000000200000000u
   DEF_BIT_34=0x0000000400000000u
   DEF_BIT_35=0x0000000800000000u
   DEF_BIT_36=0x0000001000000000u
   DEF_BIT_37=0x0000002000000000u
   DEF_BIT_38=0x0000004000000000u
   DEF_BIT_39=0x0000008000000000u
   DEF_BIT_40=0x0000010000000000u
   DEF_BIT_41=0x0000020000000000u
   DEF_BIT_42=0x0000040000000000u
   DEF_BIT_43=0x0000080000000000u
   DEF_BIT_44=0x0000100000000000u
   DEF_BIT_45=0x0000200000000000u
   DEF_BIT_46=0x0000400000000000u
   DEF_BIT_47=0x0000800000000000u
   DEF_BIT_48=0x0001000000000000u
   DEF_BIT_49=0x0002000000000000u
   DEF_BIT_50=0x0004000000000000u
   DEF_BIT_51=0x0008000000000000u
   DEF_BIT_52=0x0010000000000000u
   DEF_BIT_53=0x0020000000000000u
   DEF_BIT_54=0x0040000000000000u
   DEF_BIT_55=0x0080000000000000u
   DEF_BIT_56=0x0100000000000000u
   DEF_BIT_57=0x0200000000000000u
   DEF_BIT_58=0x0400000000000000u
   DEF_BIT_59=0x0800000000000000u
   DEF_BIT_60=0x1000000000000000u
   DEF_BIT_61=0x2000000000000000u
   DEF_BIT_62=0x4000000000000000u
   DEF_BIT_63=0x8000000000000000u
   DEF_BIT_CLR(val,mask)=((val) = ((val) & ~(mask)))
   DEF_BIT_CLR_08(val,mask)=DEF_BIT_CLR((val), (mask))
   DEF_BIT_CLR_16(val,mask)=DEF_BIT_CLR((val), (mask))
   DEF_BIT_CLR_32(val,mask)=DEF_BIT_CLR((val), (mask))
   DEF_BIT_CLR_64(val,mask)=DEF_BIT_CLR((val), (mask))
   DEF_BIT_FIELD(bit_field,bit_shift)=((((bit_field) >= DEF_INT_CPU_NBR_BITS) ? (DEF_INT_CPU_U_MAX_VAL) : (DEF_BIT(bit_field) - 1uL)) << (bit_shift))
   DEF_BIT_FIELD_08(bit_field,bit_shift)=((CPU_INT08U)((((CPU_INT08U)(bit_field) >= (CPU_INT08U)DEF_INT_08_NBR_BITS) ? (CPU_INT08U)(DEF_INT_08U_MAX_VAL) : (CPU_INT08U)(DEF_BIT08(bit_field) - (CPU_INT08U)1u)) << (bit_shift)))
   DEF_BIT_FIELD_16(bit_field,bit_shift)=((CPU_INT16U)((((CPU_INT16U)(bit_field) >= (CPU_INT16U)DEF_INT_16_NBR_BITS) ? (CPU_INT16U)(DEF_INT_16U_MAX_VAL) : (CPU_INT16U)(DEF_BIT16(bit_field) - (CPU_INT16U)1u)) << (bit_shift)))
   DEF_BIT_FIELD_32(bit_field,bit_shift)=((CPU_INT32U)((((CPU_INT32U)(bit_field) >= (CPU_INT32U)DEF_INT_32_NBR_BITS) ? (CPU_INT32U)(DEF_INT_32U_MAX_VAL) : (CPU_INT32U)(DEF_BIT32(bit_field) - (CPU_INT32U)1u)) << (bit_shift)))
   DEF_BIT_FIELD_64(bit_field,bit_shift)=((CPU_INT64U)((((CPU_INT64U)(bit_field) >= (CPU_INT64U)DEF_INT_64_NBR_BITS) ? (CPU_INT64U)(DEF_INT_64U_MAX_VAL) : (CPU_INT64U)(DEF_BIT64(bit_field) - (CPU_INT64U)1u)) << (bit_shift)))
   DEF_BIT_FIELD_ENC(field_val,field_mask)=(((field_val) * ((field_mask) & ~((field_mask) << 1u))) & (field_mask))
   DEF_BIT_FIELD_RD(val,field_mask)=(((val) & (field_mask)) / ((field_mask) & ~((field_mask) << 1u)))
   DEF_BIT_FIELD_WR(var,field_val,field_mask)=(var) = (((var) & ~(field_mask)) | DEF_BIT_FIELD_ENC((field_val), (field_mask)))
   DEF_BIT_IS_CLR(val,mask)=(((((val) & (mask)) == 0u) && ((mask) != 0u)) ? (DEF_YES) : (DEF_NO))
   DEF_BIT_IS_CLR_ANY(val,mask)=((((val) & (mask)) == (mask)) ? (DEF_NO ) : (DEF_YES))
   DEF_BIT_IS_SET(val,mask)=(((((val) & (mask)) == (mask)) && ((mask) != 0u)) ? (DEF_YES) : (DEF_NO))
   DEF_BIT_IS_SET_ANY(val,mask)=((((val) & (mask)) == 0u) ? (DEF_NO ) : (DEF_YES))
   DEF_BIT_MASK(bit_mask,bit_shift)=((bit_mask) << (bit_shift))
   DEF_BIT_MASK_08(bit_mask,bit_shift)=((CPU_INT08U)((CPU_INT08U)(bit_mask) << (bit_shift)))
   DEF_BIT_MASK_16(bit_mask,bit_shift)=((CPU_INT16U)((CPU_INT16U)(bit_mask) << (bit_shift)))
   DEF_BIT_MASK_32(bit_mask,bit_shift)=((CPU_INT32U)((CPU_INT32U)(bit_mask) << (bit_shift)))
   DEF_BIT_MASK_64(bit_mask,bit_shift)=((CPU_INT64U)((CPU_INT64U)(bit_mask) << (bit_shift)))
   DEF_BIT_NONE=0x00u
   DEF_BIT_SET(val,mask)=((val) = ((val) | (mask)))
   DEF_BIT_SET_08(val,mask)=DEF_BIT_SET((val), (mask))
   DEF_BIT_SET_16(val,mask)=DEF_BIT_SET((val), (mask))
   DEF_BIT_SET_32(val,mask)=DEF_BIT_SET((val), (mask))
   DEF_BIT_SET_64(val,mask)=DEF_BIT_SET((val), (mask))
   DEF_BIT_TOGGLE(val,mask)=((val) ^= (mask))
   DEF_CHK_VAL(val,val_min,val_max)=(((DEF_CHK_VAL_MIN((val), (val_min)) == DEF_FAIL) || (DEF_CHK_VAL_MAX((val), (val_max)) == DEF_FAIL)) ? DEF_FAIL : DEF_OK)
   DEF_CHK_VAL_MAX(val,val_max)=(((!(((val_max) >= 1) && ((val) < 1))) && ((((val) >= 1) && ((val_max) < 1)) || ((val) > (val_max)))) ? DEF_FAIL : DEF_OK)
   DEF_CHK_VAL_MIN(val,val_min)=(((!(((val) >= 1) && ((val_min) < 1))) && ((((val_min) >= 1) && ((val) < 1)) || ((val) < (val_min)))) ? DEF_FAIL : DEF_OK)
   DEF_CLR=0u
   DEF_DISABLED=0u
   DEF_ENABLED=1u
   DEF_FAIL=0u
   DEF_FALSE=0u
   DEF_GET_U_MAX_VAL(obj)=((sizeof(obj) == CPU_WORD_SIZE_08) ? DEF_INT_08U_MAX_VAL : ((sizeof(obj) == CPU_WORD_SIZE_16) ? DEF_INT_16U_MAX_VAL : ((sizeof(obj) == CPU_WORD_SIZE_32) ? DEF_INT_32U_MAX_VAL : ((sizeof(obj) == CPU_WORD_SIZE_64) ? DEF_INT_64U_MAX_VAL : 0))))
   DEF_INACTIVE=0u
   DEF_INT_08S_MAX_VAL=DEF_INT_08S_MAX_VAL_ONES_CPL
   DEF_INT_08S_MAX_VAL_ONES_CPL=127
   DEF_INT_08S_MIN_VAL=(DEF_INT_08S_MIN_VAL_ONES_CPL - 1)
   DEF_INT_08S_MIN_VAL_ONES_CPL=(-127)
   DEF_INT_08S_NBR_DIG_MAX=3u
   DEF_INT_08S_NBR_DIG_MIN=3u
   DEF_INT_08U_MAX_VAL=255u
   DEF_INT_08U_MIN_VAL=0u
   DEF_INT_08U_NBR_DIG_MAX=3u
   DEF_INT_08U_NBR_DIG_MIN=1u
   DEF_INT_08_MASK=0xFFu
   DEF_INT_08_NBR_BITS=8u
   DEF_INT_16S_MAX_VAL=DEF_INT_16S_MAX_VAL_ONES_CPL
   DEF_INT_16S_MAX_VAL_ONES_CPL=32767
   DEF_INT_16S_MIN_VAL=(DEF_INT_16S_MIN_VAL_ONES_CPL - 1)
   DEF_INT_16S_MIN_VAL_ONES_CPL=(-32767)
   DEF_INT_16S_NBR_DIG_MAX=5u
   DEF_INT_16S_NBR_DIG_MIN=5u
   DEF_INT_16U_MAX_VAL=65535u
   DEF_INT_16U_MIN_VAL=0u
   DEF_INT_16U_NBR_DIG_MAX=5u
   DEF_INT_16U_NBR_DIG_MIN=1u
   DEF_INT_16_MASK=0xFFFFu
   DEF_INT_16_NBR_BITS=16u
   DEF_INT_32S_MAX_VAL=DEF_INT_32S_MAX_VAL_ONES_CPL
   DEF_INT_32S_MAX_VAL_ONES_CPL=2147483647
   DEF_INT_32S_MIN_VAL=(DEF_INT_32S_MIN_VAL_ONES_CPL - 1)
   DEF_INT_32S_MIN_VAL_ONES_CPL=(-2147483647)
   DEF_INT_32S_NBR_DIG_MAX=10u
   DEF_INT_32S_NBR_DIG_MIN=10u
   DEF_INT_32U_MAX_VAL=4294967295u
   DEF_INT_32U_MIN_VAL=0u
   DEF_INT_32U_NBR_DIG_MAX=10u
   DEF_INT_32U_NBR_DIG_MIN=1u
   DEF_INT_32_MASK=0xFFFFFFFFu
   DEF_INT_32_NBR_BITS=32u
   DEF_INT_64S_MAX_VAL=DEF_INT_64S_MAX_VAL_ONES_CPL
   DEF_INT_64S_MAX_VAL_ONES_CPL=9223372036854775807
   DEF_INT_64S_MIN_VAL=(DEF_INT_64S_MIN_VAL_ONES_CPL - 1)
   DEF_INT_64S_MIN_VAL_ONES_CPL=(-9223372036854775807)
   DEF_INT_64S_NBR_DIG_MAX=19u
   DEF_INT_64S_NBR_DIG_MIN=19u
   DEF_INT_64U_MAX_VAL=18446744073709551615u
   DEF_INT_64U_MIN_VAL=0u
   DEF_INT_64U_NBR_DIG_MAX=20u
   DEF_INT_64U_NBR_DIG_MIN=1u
   DEF_INT_64_MASK=0xFFFFFFFFFFFFFFFFu
   DEF_INT_64_NBR_BITS=64u
   DEF_INT_CPU_MASK=DEF_INT_32_MASK
   DEF_INT_CPU_NBR_BITS=(CPU_CFG_DATA_SIZE * DEF_OCTET_NBR_BITS)
   DEF_INT_CPU_NBR_BITS_MAX=(CPU_CFG_DATA_SIZE_MAX * DEF_OCTET_NBR_BITS)
   DEF_INT_CPU_S_MAX_VAL=DEF_INT_32S_MAX_VAL
   DEF_INT_CPU_S_MAX_VAL_ONES_CPL=DEF_INT_32S_MAX_VAL_ONES_CPL
   DEF_INT_CPU_S_MIN_VAL=DEF_INT_32S_MIN_VAL
   DEF_INT_CPU_S_MIN_VAL_ONES_CPL=DEF_INT_32S_MIN_VAL_ONES_CPL
   DEF_INT_CPU_U_MAX_VAL=DEF_INT_32U_MAX_VAL
   DEF_INT_CPU_U_MIN_VAL=DEF_INT_32U_MIN_VAL
   DEF_INVALID=0u
   DEF_MAX(a,b)=(((a) > (b)) ? (a) : (b))
   DEF_MIN(a,b)=(((a) < (b)) ? (a) : (b))
   DEF_NBR_BASE_BIN=2u
   DEF_NBR_BASE_DEC=10u
   DEF_NBR_BASE_HEX=16u
   DEF_NBR_BASE_OCT=8u
   DEF_NIBBLE_MASK=0x0Fu
   DEF_NIBBLE_NBR_BITS=4u
   DEF_NO=0u
   DEF_NULL=0
   DEF_OCTET_MASK=0xFFu
   DEF_OCTET_NBR_BITS=8u
   DEF_OCTET_TO_BIT_MASK=0x07u
   DEF_OCTET_TO_BIT_NBR_BITS=3u
   DEF_OCTET_TO_BIT_SHIFT=DEF_OCTET_TO_BIT_NBR_BITS
   DEF_OFF=0u
   DEF_OK=1u
   DEF_ON=1u
   DEF_SET=1u
   DEF_TIME_NBR_DAY_PER_WK=7u
   DEF_TIME_NBR_DAY_PER_YR=365u
   DEF_TIME_NBR_DAY_PER_YR_LEAP=366u
   DEF_TIME_NBR_HR_PER_DAY=24u
   DEF_TIME_NBR_HR_PER_WK=(DEF_TIME_NBR_HR_PER_DAY * DEF_TIME_NBR_DAY_PER_WK )
   DEF_TIME_NBR_HR_PER_YR=(DEF_TIME_NBR_HR_PER_DAY * DEF_TIME_NBR_DAY_PER_YR )
   DEF_TIME_NBR_HR_PER_YR_LEAP=(DEF_TIME_NBR_HR_PER_DAY * DEF_TIME_NBR_DAY_PER_YR_LEAP)
   DEF_TIME_NBR_MIN_PER_DAY=(DEF_TIME_NBR_MIN_PER_HR * DEF_TIME_NBR_HR_PER_DAY )
   DEF_TIME_NBR_MIN_PER_HR=60u
   DEF_TIME_NBR_MIN_PER_WK=(DEF_TIME_NBR_MIN_PER_DAY * DEF_TIME_NBR_DAY_PER_WK )
   DEF_TIME_NBR_MIN_PER_YR=(DEF_TIME_NBR_MIN_PER_DAY * DEF_TIME_NBR_DAY_PER_YR )
   DEF_TIME_NBR_MIN_PER_YR_LEAP=(DEF_TIME_NBR_MIN_PER_DAY * DEF_TIME_NBR_DAY_PER_YR_LEAP)
   DEF_TIME_NBR_mS_PER_SEC=1000u
   DEF_TIME_NBR_nS_PER_SEC=1000000000u
   DEF_TIME_NBR_SEC_PER_DAY=(DEF_TIME_NBR_SEC_PER_HR * DEF_TIME_NBR_HR_PER_DAY )
   DEF_TIME_NBR_SEC_PER_HR=(DEF_TIME_NBR_SEC_PER_MIN * DEF_TIME_NBR_MIN_PER_HR )
   DEF_TIME_NBR_SEC_PER_MIN=60u
   DEF_TIME_NBR_SEC_PER_WK=(DEF_TIME_NBR_SEC_PER_DAY * DEF_TIME_NBR_DAY_PER_WK )
   DEF_TIME_NBR_SEC_PER_YR=(DEF_TIME_NBR_SEC_PER_DAY * DEF_TIME_NBR_DAY_PER_YR )
   DEF_TIME_NBR_SEC_PER_YR_LEAP=(DEF_TIME_NBR_SEC_PER_DAY * DEF_TIME_NBR_DAY_PER_YR_LEAP)
   DEF_TIME_NBR_uS_PER_SEC=1000000u
   DEF_TRUE=1u
   DEF_VALID=1u
   DEF_YES=1u
   dmb()=__asm__ __volatile__ ("dmb" : : : "memory")
   dsb()=__asm__ __volatile__ ("dsb" : : : "memory")
   EOF=(-1)
   FALSE=0U
   fast_putc(x,p)=(--(p)->_w < 0 ? __swbuf_r(_REENT, (int)(x), p) == EOF : (*(p)->_p = (x), (p)->_p++, 0))
   FD_CLR(n,p)=((p)->fds_bits[(n)/NFDBITS] &= ~(1L << ((n) % NFDBITS)))
   FD_ISSET(n,p)=((p)->fds_bits[(n)/NFDBITS] & (1L << ((n) % NFDBITS)))
   FD_SET(n,p)=((p)->fds_bits[(n)/NFDBITS] |= (1L << ((n) % NFDBITS)))
   fd_set=_types_fd_set
   FD_SETSIZE=64
   FD_ZERO(p)=(__extension__ (void)({ size_t __i; char *__tmp = (char *)p; for (__i = 0; __i < sizeof (*(p)); ++__i) *__tmp++ = 0; }))
   feof(p)=__sfeof(p)
   ferror(p)=__sferror(p)
   FILENAME_MAX=1024
   FOPEN_MAX=20
   fropen(__cookie,__fn)=funopen(__cookie, __fn, (int (*)())0, (fpos_t (*)())0, (int (*)())0)
   fwopen(__cookie,__fn)=funopen(__cookie, (int (*)())0, __fn, (fpos_t (*)())0, (int (*)())0)
   getc(fp)=__sgetc_r(_REENT, fp)
   getchar()=getc(stdin)
   HAVE_INITFINI_ARRAY=1
   howmany(x,y)=(((x)+((y)-1))/(y))
   INLINE=inline
   INST_SYNC=isb()
   INT16_C(x)=__INT16_C(x)
   INT16_MAX=__INT16_MAX__
   INT16_MIN=(-__INT16_MAX__ - 1)
   INT32_C(x)=__INT32_C(x)
   INT32_MAX=__INT32_MAX__
   INT32_MIN=(-__INT32_MAX__ - 1)
   INT64_C(x)=__INT64_C(x)
   INT64_MAX=__INT64_MAX__
   INT64_MIN=(-__INT64_MAX__ - 1)
   INT8_C(x)=__INT8_C(x)
   INT8_MAX=__INT8_MAX__
   INT8_MIN=(-__INT8_MAX__ - 1)
   INTMAX_C(x)=__INTMAX_C(x)
   INTMAX_MAX=__INTMAX_MAX__
   INTMAX_MIN=(-INTMAX_MAX - 1)
   INTPTR_MAX=__INTPTR_MAX__
   INTPTR_MIN=(-__INTPTR_MAX__ - 1)
   INT_FAST16_MAX=__INT_FAST16_MAX__
   INT_FAST16_MIN=(-__INT_FAST16_MAX__ - 1)
   INT_FAST32_MAX=__INT_FAST32_MAX__
   INT_FAST32_MIN=(-__INT_FAST32_MAX__ - 1)
   INT_FAST64_MAX=__INT_FAST64_MAX__
   INT_FAST64_MIN=(-__INT_FAST64_MAX__ - 1)
   INT_FAST8_MAX=__INT_FAST8_MAX__
   INT_FAST8_MIN=(-__INT_FAST8_MAX__ - 1)
   INT_LEAST16_MAX=__INT_LEAST16_MAX__
   INT_LEAST16_MIN=(-__INT_LEAST16_MAX__ - 1)
   INT_LEAST32_MAX=__INT_LEAST32_MAX__
   INT_LEAST32_MIN=(-__INT_LEAST32_MAX__ - 1)
   INT_LEAST64_MAX=__INT_LEAST64_MAX__
   INT_LEAST64_MIN=(-__INT_LEAST64_MAX__ - 1)
   INT_LEAST8_MAX=__INT_LEAST8_MAX__
   INT_LEAST8_MIN=(-__INT_LEAST8_MAX__ - 1)
   isalnum(__c)=(__ctype_lookup(__c)&(_U|_L|_N))
   isalpha(__c)=(__ctype_lookup(__c)&(_U|_L))
   isascii(__c)=((unsigned)(__c)<=0177)
   isb()=__asm__ __volatile__ ("isb" : : : "memory")
   isblank(__c)=__extension__ ({ __typeof__ (__c) __x = (__c); (__ctype_lookup(__x)&_B) || (int) (__x) == '\t';})
   iscntrl(__c)=(__ctype_lookup(__c)&_C)
   isdigit(__c)=(__ctype_lookup(__c)&_N)
   isgraph(__c)=(__ctype_lookup(__c)&(_P|_U|_L|_N))
   islower(__c)=((__ctype_lookup(__c)&(_U|_L))==_L)
   isprint(__c)=(__ctype_lookup(__c)&(_P|_U|_L|_N|_B))
   ispunct(__c)=(__ctype_lookup(__c)&_P)
   isspace(__c)=(__ctype_lookup(__c)&_S)
   isupper(__c)=((__ctype_lookup(__c)&(_U|_L))==_U)
   isxdigit(__c)=(__ctype_lookup(__c)&(_X|_N))
   ldr(adr)=({u32 rval; __asm__ __volatile__( "ldr	%0,[%1]" : "=r" (rval) : "r" (adr) ); rval; })
   ldrb(adr)=({u8 rval; __asm__ __volatile__( "ldrb	%0,[%1]" : "=r" (rval) : "r" (adr) ); rval; })
   LIB_ASCII_EXT=extern
   LIB_ASCII_MODULE_PRESENT=
   LIB_CFG_MODULE_PRESENT=
   LIB_DEF_MODULE_PRESENT=
   LIB_MATH_EXT=extern
   LIB_MATH_MODULE_PRESENT=
   LIB_MEM_BLK_QTY_UNLIMITED=0u
   LIB_MEM_CFG_ARG_CHK_EXT_EN=DEF_DISABLED
   LIB_MEM_CFG_DBG_INFO_EN=DEF_DISABLED
   LIB_MEM_CFG_HEAP_PADDING_ALIGN=LIB_MEM_PADDING_ALIGN_NONE
   LIB_MEM_CFG_HEAP_SIZE=1024u
   LIB_MEM_CFG_OPTIMIZE_ASM_EN=DEF_DISABLED
   LIB_MEM_EXT=extern
   LIB_MEM_MODULE_PRESENT=
   LIB_MEM_PADDING_ALIGN_NONE=1u
   LIB_STR_CFG_FP_EN=DEF_DISABLED
   LIB_STR_CFG_FP_MAX_NBR_DIG_SIG=LIB_STR_FP_MAX_NBR_DIG_SIG_DFLT
   LIB_STR_EXT=extern
   LIB_STR_FP_MAX_NBR_DIG_SIG_DFLT=7u
   LIB_STR_FP_MAX_NBR_DIG_SIG_MAX=9u
   LIB_STR_FP_MAX_NBR_DIG_SIG_MIN=1u
   LIB_STR_MODULE_PRESENT=
   LIB_VERSION=13801u
   LOWER_32_BITS(n)=((u32)(n))
   L_cuserid=9
   L_tmpnam=FILENAME_MAX
   MATH_IS_PWR2(nbr)=((((nbr) != 0u) && (((nbr) & ((nbr) - 1u)) == 0u)) ? DEF_YES : DEF_NO)
   MATH_ROUND_INC_UP(nbr,inc)=(((nbr) + ((inc) - 1)) / (inc) * (inc))
   MATH_ROUND_INC_UP_PWR2(nbr,inc)=(((nbr) & ~((inc) - 1)) + (((nbr) & ((inc) - 1)) == 0 ? 0 : (inc)))
   MEM_VAL_BIG_TO_HOST_16(val)=MEM_VAL_BIG_TO_LITTLE_16(val)
   MEM_VAL_BIG_TO_HOST_32(val)=MEM_VAL_BIG_TO_LITTLE_32(val)
   MEM_VAL_BIG_TO_LITTLE_16(val)=((CPU_INT16U)(((CPU_INT16U)((((CPU_INT16U)(val)) & (CPU_INT16U) 0xFF00u) >> (1u * DEF_OCTET_NBR_BITS))) | ((CPU_INT16U)((((CPU_INT16U)(val)) & (CPU_INT16U) 0x00FFu) << (1u * DEF_OCTET_NBR_BITS)))))
   MEM_VAL_BIG_TO_LITTLE_32(val)=((CPU_INT32U)(((CPU_INT32U)((((CPU_INT32U)(val)) & (CPU_INT32U)0xFF000000u) >> (3u * DEF_OCTET_NBR_BITS))) | ((CPU_INT32U)((((CPU_INT32U)(val)) & (CPU_INT32U)0x00FF0000u) >> (1u * DEF_OCTET_NBR_BITS))) | ((CPU_INT32U)((((CPU_INT32U)(val)) & (CPU_INT32U)0x0000FF00u) << (1u * DEF_OCTET_NBR_BITS))) | ((CPU_INT32U)((((CPU_INT32U)(val)) & (CPU_INT32U)0x000000FFu) << (3u * DEF_OCTET_NBR_BITS)))))
   MEM_VAL_COPY(addr_dest,addr_src,val_size)=do { CPU_SIZE_T _i; for (_i = 0; _i < (val_size); _i++) { (*(((CPU_INT08U *)(addr_dest)) +_i)) = (*(((CPU_INT08U *)(addr_src)) +_i)); } } while (0)
   MEM_VAL_COPY_08(addr_dest,addr_src)=do { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); } while (0)
   MEM_VAL_COPY_16(addr_dest,addr_src)=do { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1)); } while (0)
   MEM_VAL_COPY_32(addr_dest,addr_src)=do { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1)); (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 2)); (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 3)); } while (0)
   MEM_VAL_COPY_GET_INT08U(addr_dest,addr_src)=MEM_VAL_COPY_GET_INT08U_LITTLE(addr_dest, addr_src)
   MEM_VAL_COPY_GET_INT08U_BIG(addr_dest,addr_src)=do { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); } while (0)
   MEM_VAL_COPY_GET_INT08U_LITTLE(addr_dest,addr_src)=do { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); } while (0)
   MEM_VAL_COPY_GET_INT16U(addr_dest,addr_src)=MEM_VAL_COPY_GET_INT16U_LITTLE(addr_dest, addr_src)
   MEM_VAL_COPY_GET_INT16U_BIG(addr_dest,addr_src)=do { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 1)); (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 0)); } while (0)
   MEM_VAL_COPY_GET_INT16U_LITTLE(addr_dest,addr_src)=do { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1)); } while (0)
   MEM_VAL_COPY_GET_INT32U(addr_dest,addr_src)=MEM_VAL_COPY_GET_INT32U_LITTLE(addr_dest, addr_src)
   MEM_VAL_COPY_GET_INT32U_BIG(addr_dest,addr_src)=do { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 3)); (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 2)); (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 1)); (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 0)); } while (0)
   MEM_VAL_COPY_GET_INT32U_LITTLE(addr_dest,addr_src)=do { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1)); (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 2)); (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 3)); } while (0)
   MEM_VAL_COPY_GET_INTU(addr_dest,addr_src,val_size)=MEM_VAL_COPY_GET_INTU_LITTLE(addr_dest, addr_src, val_size)
   MEM_VAL_COPY_GET_INTU_BIG(addr_dest,addr_src,val_size)=do { CPU_SIZE_T _i; CPU_SIZE_T _j; _j = (val_size) - 1; for (_i = 0; _i < (val_size); _i++) { (*(((CPU_INT08U *)(addr_dest)) + _i)) = (*(((CPU_INT08U *)(addr_src)) + _j)); _j--; } } while (0)
   MEM_VAL_COPY_GET_INTU_LITTLE(addr_dest,addr_src,val_size)=do { CPU_SIZE_T _i; for (_i = 0; _i < (val_size); _i++) { (*(((CPU_INT08U *)(addr_dest)) + _i)) = (*(((CPU_INT08U *)(addr_src)) + _i)); } } while (0)
   MEM_VAL_COPY_SET_INT08U(addr_dest,addr_src)=MEM_VAL_COPY_GET_INT08U(addr_dest, addr_src)
   MEM_VAL_COPY_SET_INT08U_BIG(addr_dest,addr_src)=MEM_VAL_COPY_GET_INT08U_BIG(addr_dest, addr_src)
   MEM_VAL_COPY_SET_INT08U_LITTLE(addr_dest,addr_src)=MEM_VAL_COPY_GET_INT08U_LITTLE(addr_dest, addr_src)
   MEM_VAL_COPY_SET_INT16U(addr_dest,addr_src)=MEM_VAL_COPY_GET_INT16U(addr_dest, addr_src)
   MEM_VAL_COPY_SET_INT16U_BIG(addr_dest,addr_src)=MEM_VAL_COPY_GET_INT16U_BIG(addr_dest, addr_src)
   MEM_VAL_COPY_SET_INT16U_LITTLE(addr_dest,addr_src)=MEM_VAL_COPY_GET_INT16U_LITTLE(addr_dest, addr_src)
   MEM_VAL_COPY_SET_INT32U(addr_dest,addr_src)=MEM_VAL_COPY_GET_INT32U(addr_dest, addr_src)
   MEM_VAL_COPY_SET_INT32U_BIG(addr_dest,addr_src)=MEM_VAL_COPY_GET_INT32U_BIG(addr_dest, addr_src)
   MEM_VAL_COPY_SET_INT32U_LITTLE(addr_dest,addr_src)=MEM_VAL_COPY_GET_INT32U_LITTLE(addr_dest, addr_src)
   MEM_VAL_COPY_SET_INTU(addr_dest,addr_src,val_size)=MEM_VAL_COPY_GET_INTU(addr_dest, addr_src, val_size)
   MEM_VAL_COPY_SET_INTU_BIG(addr_dest,addr_src,val_size)=MEM_VAL_COPY_GET_INTU_BIG(addr_dest, addr_src, val_size)
   MEM_VAL_COPY_SET_INTU_LITTLE(addr_dest,addr_src,val_size)=MEM_VAL_COPY_GET_INTU_LITTLE(addr_dest, addr_src, val_size)
   MEM_VAL_GET_INT08U(addr)=MEM_VAL_GET_INT08U_LITTLE(addr)
   MEM_VAL_GET_INT08U_BIG(addr)=((CPU_INT08U) ((CPU_INT08U)(((CPU_INT08U)(*(((CPU_INT08U *)(addr)) + 0))) << (0u * DEF_OCTET_NBR_BITS))))
   MEM_VAL_GET_INT08U_LITTLE(addr)=((CPU_INT08U) ((CPU_INT08U)(((CPU_INT08U)(*(((CPU_INT08U *)(addr)) + 0))) << (0u * DEF_OCTET_NBR_BITS))))
   MEM_VAL_GET_INT16U(addr)=MEM_VAL_GET_INT16U_LITTLE(addr)
   MEM_VAL_GET_INT16U_BIG(addr)=((CPU_INT16U)(((CPU_INT16U)(((CPU_INT16U)(*(((CPU_INT08U *)(addr)) + 0))) << (1u * DEF_OCTET_NBR_BITS))) + ((CPU_INT16U)(((CPU_INT16U)(*(((CPU_INT08U *)(addr)) + 1))) << (0u * DEF_OCTET_NBR_BITS)))))
   MEM_VAL_GET_INT16U_LITTLE(addr)=((CPU_INT16U)(((CPU_INT16U)(((CPU_INT16U)(*(((CPU_INT08U *)(addr)) + 0))) << (0u * DEF_OCTET_NBR_BITS))) + ((CPU_INT16U)(((CPU_INT16U)(*(((CPU_INT08U *)(addr)) + 1))) << (1u * DEF_OCTET_NBR_BITS)))))
   MEM_VAL_GET_INT32U(addr)=MEM_VAL_GET_INT32U_LITTLE(addr)
   MEM_VAL_GET_INT32U_BIG(addr)=((CPU_INT32U)(((CPU_INT32U)(((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 0))) << (3u * DEF_OCTET_NBR_BITS))) + ((CPU_INT32U)(((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 1))) << (2u * DEF_OCTET_NBR_BITS))) + ((CPU_INT32U)(((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 2))) << (1u * DEF_OCTET_NBR_BITS))) + ((CPU_INT32U)(((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 3))) << (0u * DEF_OCTET_NBR_BITS)))))
   MEM_VAL_GET_INT32U_LITTLE(addr)=((CPU_INT32U)(((CPU_INT32U)(((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 0))) << (0u * DEF_OCTET_NBR_BITS))) + ((CPU_INT32U)(((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 1))) << (1u * DEF_OCTET_NBR_BITS))) + ((CPU_INT32U)(((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 2))) << (2u * DEF_OCTET_NBR_BITS))) + ((CPU_INT32U)(((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 3))) << (3u * DEF_OCTET_NBR_BITS)))))
   MEM_VAL_HOST_TO_BIG_16(val)=MEM_VAL_BIG_TO_HOST_16(val)
   MEM_VAL_HOST_TO_BIG_32(val)=MEM_VAL_BIG_TO_HOST_32(val)
   MEM_VAL_HOST_TO_LITTLE_16(val)=MEM_VAL_LITTLE_TO_HOST_16(val)
   MEM_VAL_HOST_TO_LITTLE_32(val)=MEM_VAL_LITTLE_TO_HOST_32(val)
   MEM_VAL_LITTLE_TO_BIG_16(val)=MEM_VAL_BIG_TO_LITTLE_16(val)
   MEM_VAL_LITTLE_TO_BIG_32(val)=MEM_VAL_BIG_TO_LITTLE_32(val)
   MEM_VAL_LITTLE_TO_HOST_16(val)=(val)
   MEM_VAL_LITTLE_TO_HOST_32(val)=(val)
   MEM_VAL_SET_INT08U(addr,val)=MEM_VAL_SET_INT08U_LITTLE(addr, val)
   MEM_VAL_SET_INT08U_BIG(addr,val)=do { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT08U)(val)) & (CPU_INT08U) 0xFFu) >> (0u * DEF_OCTET_NBR_BITS))); } while (0)
   MEM_VAL_SET_INT08U_LITTLE(addr,val)=do { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT08U)(val)) & (CPU_INT08U) 0xFFu) >> (0u * DEF_OCTET_NBR_BITS))); } while (0)
   MEM_VAL_SET_INT16U(addr,val)=MEM_VAL_SET_INT16U_LITTLE(addr, val)
   MEM_VAL_SET_INT16U_BIG(addr,val)=do { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT16U)(val)) & (CPU_INT16U) 0xFF00u) >> (1u * DEF_OCTET_NBR_BITS))); (*(((CPU_INT08U *)(addr)) + 1)) = ((CPU_INT08U)((((CPU_INT16U)(val)) & (CPU_INT16U) 0x00FFu) >> (0u * DEF_OCTET_NBR_BITS))); } while (0)
   MEM_VAL_SET_INT16U_LITTLE(addr,val)=do { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT16U)(val)) & (CPU_INT16U) 0x00FFu) >> (0u * DEF_OCTET_NBR_BITS))); (*(((CPU_INT08U *)(addr)) + 1)) = ((CPU_INT08U)((((CPU_INT16U)(val)) & (CPU_INT16U) 0xFF00u) >> (1u * DEF_OCTET_NBR_BITS))); } while (0)
   MEM_VAL_SET_INT32U(addr,val)=MEM_VAL_SET_INT32U_LITTLE(addr, val)
   MEM_VAL_SET_INT32U_BIG(addr,val)=do { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & (CPU_INT32U)0xFF000000u) >> (3u * DEF_OCTET_NBR_BITS))); (*(((CPU_INT08U *)(addr)) + 1)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & (CPU_INT32U)0x00FF0000u) >> (2u * DEF_OCTET_NBR_BITS))); (*(((CPU_INT08U *)(addr)) + 2)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & (CPU_INT32U)0x0000FF00u) >> (1u * DEF_OCTET_NBR_BITS))); (*(((CPU_INT08U *)(addr)) + 3)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & (CPU_INT32U)0x000000FFu) >> (0u * DEF_OCTET_NBR_BITS))); } while (0)
   MEM_VAL_SET_INT32U_LITTLE(addr,val)=do { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & (CPU_INT32U)0x000000FFu) >> (0u * DEF_OCTET_NBR_BITS))); (*(((CPU_INT08U *)(addr)) + 1)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & (CPU_INT32U)0x0000FF00u) >> (1u * DEF_OCTET_NBR_BITS))); (*(((CPU_INT08U *)(addr)) + 2)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & (CPU_INT32U)0x00FF0000u) >> (2u * DEF_OCTET_NBR_BITS))); (*(((CPU_INT08U *)(addr)) + 3)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & (CPU_INT32U)0xFF000000u) >> (3u * DEF_OCTET_NBR_BITS))); } while (0)
   mfcp(rn)=({u32 rval; __asm__ __volatile__( "mrc " rn "\n" : "=r" (rval) ); rval; })
   mfcpsr()=({u32 rval; __asm__ __volatile__( "mrs	%0, cpsr\n" : "=r" (rval) ); rval; })
   mfgpr(rn)=({u32 rval; __asm__ __volatile__( "mov %0,r" stringify(rn) "\n" : "=r" (rval) ); rval; })
   mtcp(rn,v)=__asm__ __volatile__( "mcr " rn "\n" : : "r" (v) );
   mtcpsr(v)=__asm__ __volatile__( "msr	cpsr,%0\n" : : "r" (v) )
   mtgpr(rn,v)=__asm__ __volatile__( "mov r" stringify(rn) ", %0 \n" : : "r" (v) )
   NBBY=8
   NFDBITS=(sizeof (fd_mask) * NBBY)
   NULL=((void *)0)
   offsetof(TYPE,MEMBER)=__builtin_offsetof (TYPE, MEMBER)
   physadr=physadr_t
   PROBE_COM_EXT=extern
   PROBE_COM_PRESENT=
   PROBE_COM_VERSION=410u
   PTRDIFF_MAX=__PTRDIFF_MAX__
   PTRDIFF_MIN=(-PTRDIFF_MAX - 1)
   putc(x,fp)=__sputc_r(_REENT, x, fp)
   putchar(x)=putc(x, stdout)
   P_tmpdir="/tmp"
   quad=quad_t
   RAND_LCG_PARAM_A=1103515245u
   RAND_LCG_PARAM_B=12345u
   RAND_LCG_PARAM_M=0x7FFFFFFFu
   RAND_SEED_INIT_VAL=1u
   RECVING_ROLE=0
   SEEK_CUR=1
   SEEK_END=2
   SEEK_SET=0
   SENDING_ROLE=1
   SIG_ATOMIC_MAX=__STDINT_EXP(INT_MAX)
   SIG_ATOMIC_MIN=(-__STDINT_EXP(INT_MAX) - 1)
   SIZE_MAX=__SIZE_MAX__
   stderr=(_REENT->_stderr)
   stdin=(_REENT->_stdin)
   STDIN_BASEADDRESS=0xE0001000
   stdout=(_REENT->_stdout)
   STDOUT_BASEADDRESS=0xE0001000
   STDOUT_IS_PS7_UART=
   str(adr,val)=__asm__ __volatile__( "str	%0,[%1]\n" : : "r" (val), "r" (adr) )
   strb(adr,val)=__asm__ __volatile__( "strb	%0,[%1]\n" : : "r" (val), "r" (adr) )
   stringify(s)=tostring(s)
   STR_CR_LF="\r\n"
   STR_CR_LF_LEN=(sizeof(STR_CR_LF) - 1)
   Str_FmtPrint=snprintf
   Str_FmtScan=sscanf
   STR_LF_CR="\n\r"
   STR_LF_CR_LEN=(sizeof(STR_LF_CR) - 1)
   STR_NEW_LINE=STR_CR_LF
   STR_NEW_LINE_LEN=(sizeof(STR_NEW_LINE) - 1)
   STR_PARENT_PATH=".."
   STR_PARENT_PATH_LEN=(sizeof(STR_PARENT_PATH) - 1)
   SYNCHRONIZE_IO=dmb()
   TMP_MAX=26
   toascii(__c)=((__c)&0177)
   tolower(__c)=__extension__ ({ __typeof__ (__c) __x = (__c); isupper (__x) ? (int) __x - 'A' + 'a' : (int) __x;})
   tostring(s)=#s
   toupper(__c)=__extension__ ({ __typeof__ (__c) __x = (__c); islower (__x) ? (int) __x - 'a' + 'A' : (int) __x;})
   TRACE_LEVEL_DBG=2u
   TRACE_LEVEL_INFO=1u
   TRACE_LEVEL_LOG=3u
   TRACE_LEVEL_OFF=0u
   TRUE=1U
   UART_DEVICE_ID=1
   UINT16_C(x)=__UINT16_C(x)
   UINT16_MAX=__UINT16_MAX__
   UINT32_C(x)=__UINT32_C(x)
   UINT32_MAX=__UINT32_MAX__
   UINT64_C(x)=__UINT64_C(x)
   UINT64_MAX=__UINT64_MAX__
   UINT8_C(x)=__UINT8_C(x)
   UINT8_MAX=__UINT8_MAX__
   UINTMAX_C(x)=__UINTMAX_C(x)
   UINTMAX_MAX=__UINTMAX_MAX__
   UINTPTR_MAX=__UINTPTR_MAX__
   UINT_FAST16_MAX=__UINT_FAST16_MAX__
   UINT_FAST32_MAX=__UINT_FAST32_MAX__
   UINT_FAST64_MAX=__UINT_FAST64_MAX__
   UINT_FAST8_MAX=__UINT_FAST8_MAX__
   UINT_LEAST16_MAX=__UINT_LEAST16_MAX__
   UINT_LEAST32_MAX=__UINT_LEAST32_MAX__
   UINT_LEAST64_MAX=__UINT_LEAST64_MAX__
   UINT_LEAST8_MAX=__UINT_LEAST8_MAX__
   ULONG64_HI_MASK=0xFFFFFFFF00000000U
   ULONG64_LO_MASK=~ULONG64_HI_MASK
   unsigned=signed
   UPPER_32_BITS(n)=((u32)(((n) >> 16) >> 16))
   USER_PRIV_THREAD_PID="p15, 0, %0, c13,  c0, 4"
   USER_RO_THREAD_PID="p15, 0, %0, c13,  c0, 3"
   USER_RW_THREAD_PID="p15, 0, %0, c13,  c0, 2"
   va_arg(v,l)=__builtin_va_arg(v,l)
   va_copy(d,s)=__builtin_va_copy(d,s)
   va_end(v)=__builtin_va_end(v)
   va_start(v,l)=__builtin_va_start(v,l)
   WCHAR_MAX=__WCHAR_MAX__
   WCHAR_MIN=__WCHAR_MIN__
   WINT_MAX=__WINT_MAX__
   WINT_MIN=__WINT_MIN__
   XAXIVDMA_BD_BYTES_TO_CLEAR=20
   XAXIVDMA_BD_HSIZE_OFFSET=0x14
   XAXIVDMA_BD_HW_NUM_BYTES=28
   XAXIVDMA_BD_MINIMUM_ALIGNMENT=0x20
   XAXIVDMA_BD_MINIMUM_ALIGNMENT_WD=0x8
   XAXIVDMA_BD_NDESC_OFFSET=0x00
   XAXIVDMA_BD_NUM_WORDS=7
   XAXIVDMA_BD_START_ADDR_OFFSET=0x08
   XAXIVDMA_BD_STRIDE_OFFSET=0x18
   XAXIVDMA_BD_VSIZE_OFFSET=0x10
   XAXIVDMA_BUFTHRES_OFFSET=0x0000001C
   XAXIVDMA_CDESC_CURBD_MASK=0xFFFFFFE0
   XAXIVDMA_CDESC_OFFSET=0x00000008
   XAXIVDMA_CHAN_FSYNC=0
   XAXIVDMA_CHAN_OTHER_FSYNC=1
   XAXIVDMA_CR_FRMCNT_EN_MASK=0x00000010
   XAXIVDMA_CR_FSYNC_SRC_MASK=0x00000060
   XAXIVDMA_CR_GENLCK_RPT_MASK=0x00008000
   XAXIVDMA_CR_GENLCK_SRC_MASK=0x00000080
   XAXIVDMA_CR_OFFSET=0x00000000
   XAXIVDMA_CR_RD_PTR_MASK=0x00000F00
   XAXIVDMA_CR_RD_PTR_SHIFT=8
   XAXIVDMA_CR_RESET_MASK=0x00000004
   XAXIVDMA_CR_RUNSTOP_MASK=0x00000001
   XAXIVDMA_CR_SYNC_EN_MASK=0x00000008
   XAXIVDMA_CR_TAIL_EN_MASK=0x00000002
   XAXIVDMA_DELAY_MASK=0xFF000000
   XAXIVDMA_DELAY_SHIFT=24
   XAXIVDMA_DEVICE_READY=0x11111111
   XAXIVDMA_DYN_GENLOCK_MASTER=2
   XAXIVDMA_DYN_GENLOCK_SLAVE=3
   XAXIVDMA_ENABLE_DBG_ALL_FEATURES=0x0F
   XAXIVDMA_ENABLE_DBG_DLY_CNTR=0x08
   XAXIVDMA_ENABLE_DBG_FRMSTORE_REG=0x02
   XAXIVDMA_ENABLE_DBG_FRM_CNTR=0x04
   XAXIVDMA_ENABLE_DBG_THRESHOLD_REG=0x01
   XAXIVDMA_EXTERNAL_GENLOCK=0
   XAXIVDMA_FRMCNT_MASK=0x00FF0000
   XAXIVDMA_FRMCNT_SHIFT=16
   XAXIVDMA_FRMDLY_MASK=0x0F000000
   XAXIVDMA_FRMDLY_MAX=0xF
   XAXIVDMA_FRMDLY_SHIFT=24
   XAXIVDMA_FRMSTORE_MASK=0x0000003F
   XAXIVDMA_FRMSTORE_OFFSET=0x00000018
   XAXIVDMA_FRM_MAX=0xF
   XAXIVDMA_GENLOCK_MASTER=0
   XAXIVDMA_GENLOCK_SLAVE=1
   XAXIVDMA_HANDLER_ERROR=2
   XAXIVDMA_HANDLER_GENERAL=1
   XAXIVDMA_HI_FRMBUF_OFFSET=0x00000014
   XAXIVDMA_HSIZE_MASK=0x0000FFFF
   XAXIVDMA_HSIZE_OFFSET=0x00000004
   XAXIVDMA_HW_H_=
   XAXIVDMA_H_=
   XAxiVdma_In32=Xil_In32
   XAXIVDMA_INTERNAL_GENLOCK=1
   XAXIVDMA_IXR_ALL_MASK=0x00007000
   XAXIVDMA_IXR_COMPLETION_MASK=0x00003000
   XAXIVDMA_IXR_DELAYCNT_MASK=0x00002000
   XAXIVDMA_IXR_ERROR_MASK=0x00004000
   XAXIVDMA_IXR_FRMCNT_MASK=0x00001000
   XAXIVDMA_I_H_=
   XAXIVDMA_MAX_FRAMESTORE=32
   XAXIVDMA_MAX_FRAMESTORE_64=16
   XAXIVDMA_MAX_HSIZE=0xFFFF
   XAXIVDMA_MAX_STRIDE=0xFFFF
   XAXIVDMA_MAX_VSIZE=0x1FFF
   XAXIVDMA_MISMATCH_ERROR=0x80000010
   XAXIVDMA_MM2S_ADDR_OFFSET=0x00000050
   XAxiVdma_Out32=Xil_Out32
   XAXIVDMA_PARKPTR_OFFSET=0x00000028
   XAXIVDMA_PARKPTR_READREF_MASK=0x0000001F
   XAXIVDMA_PARKPTR_READSTR_MASK=0x001F0000
   XAXIVDMA_PARKPTR_WRTREF_MASK=0x00001F00
   XAXIVDMA_PARKPTR_WRTSTR_MASK=0x1F000000
   XAXIVDMA_READ=2
   XAXIVDMA_READREF_SHIFT=0
   XAxiVdma_ReadReg(BaseAddress,RegOffset)=XAxiVdma_In32((BaseAddress) + (RegOffset))
   XAXIVDMA_READSTR_SHIFT=16
   XAXIVDMA_REGINDEX_MASK=0x00000001
   XAXIVDMA_RX_OFFSET=0x00000030
   XAXIVDMA_S2MM_ADDR_OFFSET=0x000000A0
   XAXIVDMA_S2MM_DMA_IRQ_MASK_OFFSET=0x0000003C
   XAXIVDMA_S2MM_IRQ_ERR_ALL_MASK=0x0000000F
   XAXIVDMA_S2MM_IRQ_FSZLESS_SOF_ERLY_MASK=0x00000001
   XAXIVDMA_S2MM_IRQ_FSZMORE_SOF_LATE_MASK=0x00000004
   XAXIVDMA_S2MM_IRQ_LSZLESS_EOL_ERLY_MASK=0x00000002
   XAXIVDMA_S2MM_IRQ_LSZMORE_EOL_LATE_MASK=0x00000008
   XAXIVDMA_S2MM_TUSER_FSYNC=2
   XAXIVDMA_SR_ERR_ALL_MASK=0x00000FF0
   XAXIVDMA_SR_ERR_DECODE_MASK=0x00000040
   XAXIVDMA_SR_ERR_FSZ_LESS_MASK=0x00000080
   XAXIVDMA_SR_ERR_FSZ_MORE_MASK=0x00000800
   XAXIVDMA_SR_ERR_INTERNAL_MASK=0x00000010
   XAXIVDMA_SR_ERR_LSZ_LESS_MASK=0x00000100
   XAXIVDMA_SR_ERR_SG_DEC_MASK=0x00000400
   XAXIVDMA_SR_ERR_SG_SLV_MASK=0x00000200
   XAXIVDMA_SR_ERR_SLAVE_MASK=0x00000020
   XAXIVDMA_SR_HALTED_MASK=0x00000001
   XAXIVDMA_SR_IDLE_MASK=0x00000002
   XAXIVDMA_SR_OFFSET=0x00000004
   XAXIVDMA_START_ADDR_LEN=0x00000004
   XAXIVDMA_START_ADDR_MSB_OFFSET=0x00000010
   XAXIVDMA_START_ADDR_OFFSET=0x0000000C
   XAXIVDMA_STRD_FRMDLY_OFFSET=0x00000008
   XAXIVDMA_STRIDE_MASK=0x0000FFFF
   XAXIVDMA_TDESC_CURBD_MASK=0xFFFFFFE0
   XAXIVDMA_TDESC_OFFSET=0x00000010
   XAXIVDMA_TX_OFFSET=0x00000000
   XAXIVDMA_VERSION_MAJOR_MASK=0xF0000000
   XAXIVDMA_VERSION_MAJOR_SHIFT=28
   XAXIVDMA_VERSION_MINOR_MASK=0x0FF00000
   XAXIVDMA_VERSION_MINOR_SHIFT=20
   XAXIVDMA_VERSION_OFFSET=0x0000002C
   XAXIVDMA_VERSION_REV_MASK=0x000F0000
   XAXIVDMA_VSIZE_MASK=0x00001FFF
   XAXIVDMA_VSIZE_OFFSET=0x00000000
   XAXIVDMA_WRITE=1
   XAxiVdma_WriteReg(BaseAddress,RegOffset,Data)=XAxiVdma_Out32((BaseAddress) + (RegOffset), (Data))
   XAXIVDMA_WRTREF_SHIFT=8
   XAXIVDMA_WRTSTR_SHIFT=24
   xdbg_printf(...)=
   xdbg_stmnt(x)=
   XDEBUG=
   XIICPS_10_BIT_ADDR_OPTION=0x02U
   XIICPS_7_BIT_ADDR_OPTION=0x01U
   XIICPS_ADDR_MASK=0x000003FF
   XIICPS_ADDR_OFFSET=0x08U
   XIICPS_CR_ACKEN_MASK=0x00000008U
   XIICPS_CR_CLR_FIFO_MASK=0x00000040U
   XIICPS_CR_DIV_A_MASK=0x0000C000U
   XIICPS_CR_DIV_A_SHIFT=14U
   XIICPS_CR_DIV_B_MASK=0x00003F00U
   XIICPS_CR_DIV_B_SHIFT=8U
   XIICPS_CR_HOLD_MASK=0x00000010U
   XIICPS_CR_MS_MASK=0x00000002U
   XIICPS_CR_NEA_MASK=0x00000004U
   XIICPS_CR_OFFSET=0x00U
   XIICPS_CR_RD_WR_MASK=0x00000001U
   XIICPS_CR_RESET_VALUE=0U
   XIICPS_CR_SLVMON_MASK=0x00000020U
   XIICPS_DATA_INTR_DEPTH=14
   XIICPS_DATA_MASK=0x000000FF
   XIICPS_DATA_OFFSET=0x0CU
   XIicPs_DisableAllInterrupts(BaseAddress)=XIicPs_WriteReg((BaseAddress), XIICPS_IDR_OFFSET, XIICPS_IXR_ALL_INTR_MASK)
   XIicPs_DisableInterrupts(BaseAddress,IntrMask)=XIicPs_WriteReg((BaseAddress), XIICPS_IDR_OFFSET, (IntrMask))
   XIICPS_DIV_A_MAX=4U
   XIicPs_EnableInterrupts(BaseAddress,IntrMask)=XIicPs_WriteReg((BaseAddress), XIICPS_IER_OFFSET, (IntrMask))
   XIICPS_EVENT_ARB_LOST=0x0010U
   XIICPS_EVENT_COMPLETE_RECV=0x0002U
   XIICPS_EVENT_COMPLETE_SEND=0x0001U
   XIICPS_EVENT_ERROR=0x0008U
   XIICPS_EVENT_NACK=0x0020U
   XIICPS_EVENT_RX_OVR=0x0080U
   XIICPS_EVENT_RX_UNF=0x0200U
   XIICPS_EVENT_SLAVE_RDY=0x0040U
   XIICPS_EVENT_TIME_OUT=0x0004U
   XIICPS_EVENT_TX_OVR=0x0100U
   XIICPS_FIFO_DEPTH=16
   XIICPS_H=
   XIICPS_HW_H=
   XIICPS_IDR_OFFSET=0x28U
   XIICPS_IER_OFFSET=0x24U
   XIICPS_IMR_OFFSET=0x20U
   XIicPs_In32=Xil_In32
   XIICPS_ISR_OFFSET=0x10U
   XIICPS_IXR_ALL_INTR_MASK=0x000002FFU
   XIICPS_IXR_ARB_LOST_MASK=0x00000200U
   XIICPS_IXR_COMP_MASK=0x00000001U
   XIICPS_IXR_DATA_MASK=0x00000002U
   XIICPS_IXR_DEFAULT_MASK=0x000002FFU
   XIICPS_IXR_NACK_MASK=0x00000004U
   XIICPS_IXR_RX_OVR_MASK=0x00000020U
   XIICPS_IXR_RX_UNF_MASK=0x00000080U
   XIICPS_IXR_SLV_RDY_MASK=0x00000010U
   XIICPS_IXR_TO_MASK=0x00000008U
   XIICPS_IXR_TX_OVR_MASK=0x00000040U
   XIICPS_MAX_TRANSFER_SIZE=(u32)(255U - 3U)
   XIicPs_Out32=Xil_Out32
   XIicPs_ReadIER(BaseAddress)=XIicPs_ReadReg((BaseAddress), XIICPS_IER_OFFSET)
   XIicPs_ReadReg(BaseAddress,RegOffset)=XIicPs_In32((BaseAddress) + (u32)(RegOffset))
   XIicPs_RecvByte(InstancePtr)={ u8 *Data, Value; Value = (u8)(XIicPs_In32((InstancePtr)->Config.BaseAddress + (u32)XIICPS_DATA_OFFSET)); Data = &Value; *(InstancePtr)->RecvBufferPtr = *Data; (InstancePtr)->RecvBufferPtr += 1; (InstancePtr)->RecvByteCount --; }
   XIICPS_REP_START_OPTION=0x08U
   XIicPs_SendByte(InstancePtr)={ u8 Data; Data = *((InstancePtr)->SendBufferPtr); XIicPs_Out32((InstancePtr)->Config.BaseAddress + (u32)(XIICPS_DATA_OFFSET), (u32)(Data)); (InstancePtr)->SendBufferPtr += 1; (InstancePtr)->SendByteCount -= 1;}
   XIICPS_SLAVE_MON_OPTION=0x04U
   XIICPS_SLV_PAUSE_MASK=0x0000000F
   XIICPS_SLV_PAUSE_OFFSET=0x18U
   XIICPS_SR_BA_MASK=0x00000100U
   XIICPS_SR_OFFSET=0x04U
   XIICPS_SR_RXDV_MASK=0x00000020U
   XIICPS_SR_RXOVF_MASK=0x00000080U
   XIICPS_SR_RXRW_MASK=0x00000008U
   XIICPS_SR_TXDV_MASK=0x00000040U
   XIICPS_TIME_OUT_MASK=0x000000FFU
   XIICPS_TIME_OUT_OFFSET=0x1CU
   XIICPS_TO_RESET_VALUE=0x000000FFU
   XIICPS_TRANS_SIZE_MASK=0x0000003F
   XIICPS_TRANS_SIZE_OFFSET=0x14U
   XIicPs_WriteReg(BaseAddress,RegOffset,RegisterValue)=XIicPs_Out32((BaseAddress) + (u32)(RegOffset), (u32)(RegisterValue))
   Xil_AssertNonvoid(Expression)={ if (Expression) { Xil_AssertStatus = XIL_ASSERT_NONE; } else { Xil_Assert(__FILE__, __LINE__); Xil_AssertStatus = XIL_ASSERT_OCCURRED; return 0; } }
   Xil_AssertNonvoidAlways()={ Xil_Assert(__FILE__, __LINE__); Xil_AssertStatus = XIL_ASSERT_OCCURRED; return 0; }
   Xil_AssertVoid(Expression)={ if (Expression) { Xil_AssertStatus = XIL_ASSERT_NONE; } else { Xil_Assert(__FILE__, __LINE__); Xil_AssertStatus = XIL_ASSERT_OCCURRED; return; } }
   Xil_AssertVoidAlways()={ Xil_Assert(__FILE__, __LINE__); Xil_AssertStatus = XIL_ASSERT_OCCURRED; return; }
   XIL_ASSERT_H=
   XIL_ASSERT_NONE=0U
   XIL_ASSERT_OCCURRED=1U
   XIL_COMPONENT_IS_READY=0x11111111U
   XIL_COMPONENT_IS_STARTED=0x22222222U
   Xil_Htonl=Xil_EndianSwap32
   Xil_Htons=Xil_EndianSwap16
   Xil_In16LE=Xil_In16
   Xil_In32LE=Xil_In32
   XIL_IO_H=
   Xil_Ntohl=Xil_EndianSwap32
   Xil_Ntohs=Xil_EndianSwap16
   Xil_Out16LE=Xil_Out16
   Xil_Out32LE=Xil_Out32
   XIL_PRINTF_H=
   XIL_TYPES_H=
   XNULL=NULL
   XPAR_AXIVDMA_0_AXI_MM2S_ACLK_FREQ_HZ=0
   XPAR_AXIVDMA_0_AXI_S2MM_ACLK_FREQ_HZ=0
   XPAR_AXIVDMA_0_BASEADDR=0x43000000
   XPAR_AXIVDMA_0_c_addr_width=32
   XPAR_AXIVDMA_0_DEVICE_ID=XPAR_AXI_VDMA_0_DEVICE_ID
   XPAR_AXIVDMA_0_ENABLE_DEBUG_ALL=0
   XPAR_AXIVDMA_0_ENABLE_DEBUG_INFO_13=0
   XPAR_AXIVDMA_0_ENABLE_DEBUG_INFO_14=1
   XPAR_AXIVDMA_0_ENABLE_DEBUG_INFO_15=1
   XPAR_AXIVDMA_0_ENABLE_DEBUG_INFO_1=0
   XPAR_AXIVDMA_0_ENABLE_DEBUG_INFO_5=0
   XPAR_AXIVDMA_0_ENABLE_DEBUG_INFO_6=1
   XPAR_AXIVDMA_0_ENABLE_DEBUG_INFO_7=1
   XPAR_AXIVDMA_0_ENABLE_DEBUG_INFO_9=0
   XPAR_AXIVDMA_0_ENABLE_VIDPRMTR_READS=1
   XPAR_AXIVDMA_0_FLUSH_ON_FSYNC=1
   XPAR_AXIVDMA_0_HIGHADDR=0x4300FFFF
   XPAR_AXIVDMA_0_INCLUDE_INTERNAL_GENLOCK=1
   XPAR_AXIVDMA_0_INCLUDE_MM2S=1
   XPAR_AXIVDMA_0_INCLUDE_MM2S_DRE=1
   XPAR_AXIVDMA_0_INCLUDE_S2MM=0
   XPAR_AXIVDMA_0_INCLUDE_S2MM_DRE=0
   XPAR_AXIVDMA_0_INCLUDE_SG=0
   XPAR_AXIVDMA_0_MM2S_GENLOCK_MODE=0
   XPAR_AXIVDMA_0_MM2S_GENLOCK_NUM_MASTERS=1
   XPAR_AXIVDMA_0_MM2S_LINEBUFFER_DEPTH=4096
   XPAR_AXIVDMA_0_M_AXIS_MM2S_TDATA_WIDTH=32
   XPAR_AXIVDMA_0_M_AXI_MM2S_DATA_WIDTH=64
   XPAR_AXIVDMA_0_M_AXI_S2MM_DATA_WIDTH=64
   XPAR_AXIVDMA_0_NUM_FSTORES=3
   XPAR_AXIVDMA_0_S2MM_GENLOCK_MODE=0
   XPAR_AXIVDMA_0_S2MM_GENLOCK_NUM_MASTERS=1
   XPAR_AXIVDMA_0_S2MM_LINEBUFFER_DEPTH=512
   XPAR_AXIVDMA_0_S2MM_SOF_ENABLE=1
   XPAR_AXIVDMA_0_S_AXIS_S2MM_TDATA_WIDTH=32
   XPAR_AXIVDMA_0_USE_FSYNC=1
   XPAR_AXI_EMC=
   XPAR_AXI_QUAD_SPI_0_AXI4_BASEADDR=0
   XPAR_AXI_QUAD_SPI_0_AXI4_HIGHADDR=0
   XPAR_AXI_QUAD_SPI_0_BASEADDR=0x41E00000
   XPAR_AXI_QUAD_SPI_0_DEVICE_ID=0
   XPAR_AXI_QUAD_SPI_0_FIFO_DEPTH=16
   XPAR_AXI_QUAD_SPI_0_FIFO_EXIST=1
   XPAR_AXI_QUAD_SPI_0_HIGHADDR=0x41E0FFFF
   XPAR_AXI_QUAD_SPI_0_NUM_SS_BITS=1
   XPAR_AXI_QUAD_SPI_0_NUM_TRANSFER_BITS=16
   XPAR_AXI_QUAD_SPI_0_SPI_MODE=0
   XPAR_AXI_QUAD_SPI_0_SPI_SLAVE_ONLY=0
   XPAR_AXI_QUAD_SPI_0_TYPE_OF_AXI4_INTERFACE=0
   XPAR_AXI_QUAD_SPI_0_XIP_MODE=0
   XPAR_AXI_VDMA_0_ADDR_WIDTH=32
   XPAR_AXI_VDMA_0_AXI_MM2S_ACLK_FREQ_HZ=0
   XPAR_AXI_VDMA_0_AXI_S2MM_ACLK_FREQ_HZ=0
   XPAR_AXI_VDMA_0_BASEADDR=0x43000000
   XPAR_AXI_VDMA_0_DEVICE_ID=0
   XPAR_AXI_VDMA_0_ENABLE_DEBUG_ALL=0
   XPAR_AXI_VDMA_0_ENABLE_DEBUG_INFO_13=0
   XPAR_AXI_VDMA_0_ENABLE_DEBUG_INFO_14=1
   XPAR_AXI_VDMA_0_ENABLE_DEBUG_INFO_15=1
   XPAR_AXI_VDMA_0_ENABLE_DEBUG_INFO_1=0
   XPAR_AXI_VDMA_0_ENABLE_DEBUG_INFO_5=0
   XPAR_AXI_VDMA_0_ENABLE_DEBUG_INFO_6=1
   XPAR_AXI_VDMA_0_ENABLE_DEBUG_INFO_7=1
   XPAR_AXI_VDMA_0_ENABLE_DEBUG_INFO_9=0
   XPAR_AXI_VDMA_0_ENABLE_VIDPRMTR_READS=1
   XPAR_AXI_VDMA_0_FLUSH_ON_FSYNC=1
   XPAR_AXI_VDMA_0_HIGHADDR=0x4300FFFF
   XPAR_AXI_VDMA_0_INCLUDE_INTERNAL_GENLOCK=1
   XPAR_AXI_VDMA_0_INCLUDE_MM2S=1
   XPAR_AXI_VDMA_0_INCLUDE_MM2S_DRE=1
   XPAR_AXI_VDMA_0_INCLUDE_S2MM=0
   XPAR_AXI_VDMA_0_INCLUDE_S2MM_DRE=0
   XPAR_AXI_VDMA_0_INCLUDE_SG=0
   XPAR_AXI_VDMA_0_MM2S_GENLOCK_MODE=0
   XPAR_AXI_VDMA_0_MM2S_GENLOCK_NUM_MASTERS=1
   XPAR_AXI_VDMA_0_MM2S_LINEBUFFER_DEPTH=4096
   XPAR_AXI_VDMA_0_M_AXIS_MM2S_TDATA_WIDTH=32
   XPAR_AXI_VDMA_0_M_AXI_MM2S_DATA_WIDTH=64
   XPAR_AXI_VDMA_0_M_AXI_S2MM_DATA_WIDTH=64
   XPAR_AXI_VDMA_0_NUM_FSTORES=3
   XPAR_AXI_VDMA_0_S2MM_GENLOCK_MODE=0
   XPAR_AXI_VDMA_0_S2MM_GENLOCK_NUM_MASTERS=1
   XPAR_AXI_VDMA_0_S2MM_LINEBUFFER_DEPTH=512
   XPAR_AXI_VDMA_0_S2MM_SOF_ENABLE=1
   XPAR_AXI_VDMA_0_S_AXIS_S2MM_TDATA_WIDTH=32
   XPAR_AXI_VDMA_0_USE_FSYNC=1
   XPAR_CPU_CORTEXA9_0_CPU_CLK_FREQ_HZ=666666687
   XPAR_CPU_CORTEXA9_CORE_CLOCK_FREQ_HZ=XPAR_CPU_CORTEXA9_0_CPU_CLK_FREQ_HZ
   XPAR_CPU_ID=0
   XPAR_CSU_BASEADDR=0xFFCA0000U
   XPAR_CSU_VER_OFFSET=0x00000044U
   XPAR_DDR_MEM_BASEADDR=0x00000000U
   XPAR_DDR_MEM_HIGHADDR=0x3FFFFFFFU
   XPAR_GLOBAL_TMR_BASEADDR=(XPS_SCU_PERIPH_BASE + 0x00000200U)
   XPAR_GLOBAL_TMR_DEVICE_ID=0U
   XPAR_GLOBAL_TMR_INTR=XPS_GLOBAL_TMR_INT_ID
   XPAR_GLOBAL_TMR_NUM_INSTANCES=1U
   XPAR_PS7_AFI_0_S_AXI_BASEADDR=0xF8008000
   XPAR_PS7_AFI_0_S_AXI_HIGHADDR=0xF8008FFF
   XPAR_PS7_AFI_1_S_AXI_BASEADDR=0xF8009000
   XPAR_PS7_AFI_1_S_AXI_HIGHADDR=0xF8009FFF
   XPAR_PS7_AFI_2_S_AXI_BASEADDR=0xF800A000
   XPAR_PS7_AFI_2_S_AXI_HIGHADDR=0xF800AFFF
   XPAR_PS7_AFI_3_S_AXI_BASEADDR=0xF800B000
   XPAR_PS7_AFI_3_S_AXI_HIGHADDR=0xF800BFFF
   XPAR_PS7_CAN_0_INTR=XPS_CAN0_INT_ID
   XPAR_PS7_CAN_1_INTR=XPS_CAN1_INT_ID
   XPAR_PS7_CORTEXA9_0_CPU_CLK_FREQ_HZ=666666687
   XPAR_PS7_DDRC_0_S_AXI_BASEADDR=0xF8006000
   XPAR_PS7_DDRC_0_S_AXI_HIGHADDR=0xF8006FFF
   XPAR_PS7_DDR_0_S_AXI_BASEADDR=0x00100000
   XPAR_PS7_DDR_0_S_AXI_HIGHADDR=0x1FFFFFFF
   XPAR_PS7_DEV_CFG_0_BASEADDR=0xF8007000
   XPAR_PS7_DEV_CFG_0_DEVICE_ID=0
   XPAR_PS7_DEV_CFG_0_HIGHADDR=0xF80070FF
   XPAR_PS7_DMA_NS_BASEADDR=0xF8004000
   XPAR_PS7_DMA_NS_DEVICE_ID=0
   XPAR_PS7_DMA_NS_HIGHADDR=0xF8004FFF
   XPAR_PS7_DMA_S_BASEADDR=0xF8003000
   XPAR_PS7_DMA_S_DEVICE_ID=1
   XPAR_PS7_DMA_S_HIGHADDR=0xF8003FFF
   XPAR_PS7_ETHERNET_0_INTR=XPS_GEM0_INT_ID
   XPAR_PS7_ETHERNET_0_WAKE_INTR=XPS_GEM0_WAKE_INT_ID
   XPAR_PS7_ETHERNET_1_INTR=XPS_GEM1_INT_ID
   XPAR_PS7_ETHERNET_1_WAKE_INTR=XPS_GEM1_WAKE_INT_ID
   XPAR_PS7_GLOBALTIMER_0_S_AXI_BASEADDR=0xF8F00200
   XPAR_PS7_GLOBALTIMER_0_S_AXI_HIGHADDR=0xF8F002FF
   XPAR_PS7_GPIO_0_BASEADDR=0xE000A000
   XPAR_PS7_GPIO_0_DEVICE_ID=0
   XPAR_PS7_GPIO_0_HIGHADDR=0xE000AFFF
   XPAR_PS7_GPIO_0_INTR=XPS_GPIO_INT_ID
   XPAR_PS7_GPV_0_S_AXI_BASEADDR=0xF8900000
   XPAR_PS7_GPV_0_S_AXI_HIGHADDR=0xF89FFFFF
   XPAR_PS7_I2C_0_BASEADDR=0xE0004000
   XPAR_PS7_I2C_0_DEVICE_ID=0
   XPAR_PS7_I2C_0_HIGHADDR=0xE0004FFF
   XPAR_PS7_I2C_0_I2C_CLK_FREQ_HZ=111111115
   XPAR_PS7_I2C_0_INTR=XPS_I2C0_INT_ID
   XPAR_PS7_I2C_1_INTR=XPS_I2C1_INT_ID
   XPAR_PS7_INTC_DIST_0_S_AXI_BASEADDR=0xF8F01000
   XPAR_PS7_INTC_DIST_0_S_AXI_HIGHADDR=0xF8F01FFF
   XPAR_PS7_IOP_BUS_CONFIG_0_S_AXI_BASEADDR=0xE0200000
   XPAR_PS7_IOP_BUS_CONFIG_0_S_AXI_HIGHADDR=0xE0200FFF
   XPAR_PS7_L2CACHEC_0_S_AXI_BASEADDR=0xF8F02000
   XPAR_PS7_L2CACHEC_0_S_AXI_HIGHADDR=0xF8F02FFF
   XPAR_PS7_OCMC_0_S_AXI_BASEADDR=0xF800C000
   XPAR_PS7_OCMC_0_S_AXI_HIGHADDR=0xF800CFFF
   XPAR_PS7_PL310_0_S_AXI_BASEADDR=0xF8F02000
   XPAR_PS7_PL310_0_S_AXI_HIGHADDR=0xF8F02FFF
   XPAR_PS7_PMU_0_PMU1_S_AXI_BASEADDR=0xF8893000
   XPAR_PS7_PMU_0_PMU1_S_AXI_HIGHADDR=0xF8893FFF
   XPAR_PS7_PMU_0_S_AXI_BASEADDR=0xF8891000
   XPAR_PS7_PMU_0_S_AXI_HIGHADDR=0xF8891FFF
   XPAR_PS7_QSPI_0_BASEADDR=0xE000D000
   XPAR_PS7_QSPI_0_DEVICE_ID=0
   XPAR_PS7_QSPI_0_HIGHADDR=0xE000DFFF
   XPAR_PS7_QSPI_0_INTR=XPS_QSPI_INT_ID
   XPAR_PS7_QSPI_0_QSPI_CLK_FREQ_HZ=200000000
   XPAR_PS7_QSPI_0_QSPI_MODE=0
   XPAR_PS7_QSPI_LINEAR_0_S_AXI_BASEADDR=0xFC000000
   XPAR_PS7_QSPI_LINEAR_0_S_AXI_HIGHADDR=0xFCFFFFFF
   XPAR_PS7_RAM_0_S_AXI_BASEADDR=0x00000000
   XPAR_PS7_RAM_0_S_AXI_HIGHADDR=0x0003FFFF
   XPAR_PS7_RAM_1_S_AXI_BASEADDR=0xFFFC0000
   XPAR_PS7_RAM_1_S_AXI_HIGHADDR=0xFFFFFFFF
   XPAR_PS7_SCUC_0_S_AXI_BASEADDR=0xF8F00000
   XPAR_PS7_SCUC_0_S_AXI_HIGHADDR=0xF8F000FC
   XPAR_PS7_SCUGIC_0_BASEADDR=0xF8F00100
   XPAR_PS7_SCUGIC_0_DEVICE_ID=0
   XPAR_PS7_SCUGIC_0_DIST_BASEADDR=0xF8F01000
   XPAR_PS7_SCUGIC_0_HIGHADDR=0xF8F001FF
   XPAR_PS7_SCUTIMER_0_BASEADDR=0xF8F00600
   XPAR_PS7_SCUTIMER_0_DEVICE_ID=0
   XPAR_PS7_SCUTIMER_0_HIGHADDR=0xF8F0061F
   XPAR_PS7_SCUTIMER_0_INTR=XPS_SCU_TMR_INT_ID
   XPAR_PS7_SCUWDT_0_BASEADDR=0xF8F00620
   XPAR_PS7_SCUWDT_0_DEVICE_ID=0
   XPAR_PS7_SCUWDT_0_HIGHADDR=0xF8F006FF
   XPAR_PS7_SCUWDT_0_INTR=XPS_SCU_WDT_INT_ID
   XPAR_PS7_SD_0_BASEADDR=0xE0100000
   XPAR_PS7_SD_0_BUS_WIDTH=0
   XPAR_PS7_SD_0_DEVICE_ID=0
   XPAR_PS7_SD_0_HAS_CD=1
   XPAR_PS7_SD_0_HAS_EMIO=0
   XPAR_PS7_SD_0_HAS_WP=1
   XPAR_PS7_SD_0_HIGHADDR=0xE0100FFF
   XPAR_PS7_SD_0_MIO_BANK=0
   XPAR_PS7_SD_0_SDIO_CLK_FREQ_HZ=25000000
   XPAR_PS7_SD_1_BASEADDR=0xE0101000
   XPAR_PS7_SD_1_BUS_WIDTH=0
   XPAR_PS7_SD_1_DEVICE_ID=1
   XPAR_PS7_SD_1_HAS_CD=1
   XPAR_PS7_SD_1_HAS_EMIO=0
   XPAR_PS7_SD_1_HAS_WP=1
   XPAR_PS7_SD_1_HIGHADDR=0xE0101FFF
   XPAR_PS7_SD_1_MIO_BANK=0
   XPAR_PS7_SD_1_SDIO_CLK_FREQ_HZ=25000000
   XPAR_PS7_SLCR_0_S_AXI_BASEADDR=0xF8000000
   XPAR_PS7_SLCR_0_S_AXI_HIGHADDR=0xF8000FFF
   XPAR_PS7_SPI_0_INTR=XPS_SPI0_INT_ID
   XPAR_PS7_SPI_1_INTR=XPS_SPI1_INT_ID
   XPAR_PS7_TTC_0_INTR=XPS_TTC0_0_INT_ID
   XPAR_PS7_TTC_1_INTR=XPS_TTC0_1_INT_ID
   XPAR_PS7_TTC_2_INTR=XPS_TTC0_2_INT_ID
   XPAR_PS7_TTC_3_INTR=XPS_TTC1_0_INT_ID
   XPAR_PS7_TTC_4_INTR=XPS_TTC1_1_INT_ID
   XPAR_PS7_TTC_5_INTR=XPS_TTC1_2_INT_ID
   XPAR_PS7_UART_0_BASEADDR=0xE0000000
   XPAR_PS7_UART_0_DEVICE_ID=0
   XPAR_PS7_UART_0_HAS_MODEM=1
   XPAR_PS7_UART_0_HIGHADDR=0xE0000FFF
   XPAR_PS7_UART_0_INTR=XPS_UART0_INT_ID
   XPAR_PS7_UART_0_UART_CLK_FREQ_HZ=100000000
   XPAR_PS7_UART_1_BASEADDR=0xE0001000
   XPAR_PS7_UART_1_DEVICE_ID=1
   XPAR_PS7_UART_1_HAS_MODEM=0
   XPAR_PS7_UART_1_HIGHADDR=0xE0001FFF
   XPAR_PS7_UART_1_INTR=XPS_UART1_INT_ID
   XPAR_PS7_UART_1_UART_CLK_FREQ_HZ=100000000
   XPAR_PS7_USB_0_BASEADDR=0xE0002000
   XPAR_PS7_USB_0_DEVICE_ID=0
   XPAR_PS7_USB_0_HIGHADDR=0xE0002FFF
   XPAR_PS7_USB_0_INTR=XPS_USB0_INT_ID
   XPAR_PS7_USB_1_INTR=XPS_USB1_INT_ID
   XPAR_PS7_WDT_0_INTR=XPS_WDT_INT_ID
   XPAR_PS7_XADC_0_BASEADDR=0xF8007100
   XPAR_PS7_XADC_0_DEVICE_ID=0
   XPAR_PS7_XADC_0_HIGHADDR=0xF8007120
   XPAR_PS7_XADC_0_INTR=XPS_SYSMON_INT_ID
   XPAR_SCUGIC_0_CPU_BASEADDR=0xF8F00100
   XPAR_SCUGIC_0_CPU_HIGHADDR=0xF8F001FF
   XPAR_SCUGIC_0_DEVICE_ID=0
   XPAR_SCUGIC_0_DIST_BASEADDR=0xF8F01000
   XPAR_SCUGIC_ACK_BEFORE=0U
   XPAR_SCUGIC_CPU_BASEADDR=(XPS_SCU_PERIPH_BASE + 0x00000100U)
   XPAR_SCUGIC_DIST_BASEADDR=(XPS_SCU_PERIPH_BASE + 0x00001000U)
   XPAR_SCUGIC_NUM_INSTANCES=1U
   XPAR_SCUGIC_SINGLE_DEVICE_ID=0U
   XPAR_SCUTIMER_DEVICE_ID=0U
   XPAR_SCUTIMER_INTR=XPS_SCU_TMR_INT_ID
   XPAR_SCUWDT_0_BASEADDR=0xF8F00620
   XPAR_SCUWDT_0_DEVICE_ID=XPAR_PS7_SCUWDT_0_DEVICE_ID
   XPAR_SCUWDT_0_HIGHADDR=0xF8F006FF
   XPAR_SCUWDT_DEVICE_ID=0U
   XPAR_SCUWDT_INTR=XPS_SCU_WDT_INT_ID
   XPAR_SPI_0_AXI4_BASEADDR=0
   XPAR_SPI_0_AXI4_HIGHADDR=0
   XPAR_SPI_0_BASEADDR=0x41E00000
   XPAR_SPI_0_DEVICE_ID=0
   XPAR_SPI_0_FIFO_DEPTH=16
   XPAR_SPI_0_FIFO_EXIST=1
   XPAR_SPI_0_HIGHADDR=0x41E0FFFF
   XPAR_SPI_0_NUM_SS_BITS=1
   XPAR_SPI_0_NUM_TRANSFER_BITS=16
   XPAR_SPI_0_SPI_MODE=0
   XPAR_SPI_0_SPI_SLAVE_ONLY=0
   XPAR_SPI_0_TYPE_OF_AXI4_INTERFACE=0
   XPAR_SPI_0_USE_STARTUP=0
   XPAR_SPI_0_XIP_MODE=0
   XPAR_VTC_0_BASEADDR=0x43C00000
   XPAR_VTC_0_DETECT_EN=0
   XPAR_VTC_0_DET_ACHROMA_EN=0
   XPAR_VTC_0_DET_AVIDEO_EN=1
   XPAR_VTC_0_DET_HBLANK_EN=1
   XPAR_VTC_0_DET_HSYNC_EN=1
   XPAR_VTC_0_DET_VBLANK_EN=1
   XPAR_VTC_0_DET_VSYNC_EN=1
   XPAR_VTC_0_DEVICE_ID=XPAR_V_TC_0_DEVICE_ID
   XPAR_VTC_0_GENERATE_EN=1
   XPAR_VTC_0_HIGHADDR=0x43C0FFFF
   XPAR_V_TC_0_BASEADDR=0x43C00000
   XPAR_V_TC_0_DETECT_EN=0
   XPAR_V_TC_0_DET_ACHROMA_EN=0
   XPAR_V_TC_0_DET_AVIDEO_EN=1
   XPAR_V_TC_0_DET_HBLANK_EN=1
   XPAR_V_TC_0_DET_HSYNC_EN=1
   XPAR_V_TC_0_DET_VBLANK_EN=1
   XPAR_V_TC_0_DET_VSYNC_EN=1
   XPAR_V_TC_0_DEVICE_ID=0
   XPAR_V_TC_0_GENERATE_EN=1
   XPAR_V_TC_0_HIGHADDR=0x43C0FFFF
   XPAR_XADCPS_0_BASEADDR=0xF8007100
   XPAR_XADCPS_0_DEVICE_ID=XPAR_PS7_XADC_0_DEVICE_ID
   XPAR_XADCPS_0_HIGHADDR=0xF8007120
   XPAR_XADCPS_INT_ID=XPS_SYSMON_INT_ID
   XPAR_XADCPS_NUM_INSTANCES=1
   XPAR_XAXIVDMA_NUM_INSTANCES=1
   XPAR_XCANPS_0_INTR=XPS_CAN0_INT_ID
   XPAR_XCANPS_1_INTR=XPS_CAN1_INT_ID
   XPAR_XDCFG_0_BASEADDR=0xF8007000
   XPAR_XDCFG_0_DEVICE_ID=XPAR_PS7_DEV_CFG_0_DEVICE_ID
   XPAR_XDCFG_0_HIGHADDR=0xF80070FF
   XPAR_XDCFG_0_INTR=XPS_DVC_INT_ID
   XPAR_XDCFG_NUM_INSTANCES=1
   XPAR_XDMAPS_0_BASEADDR=0xF8004000
   XPAR_XDMAPS_0_DEVICE_ID=XPAR_PS7_DMA_NS_DEVICE_ID
   XPAR_XDMAPS_0_DONE_INTR_0=XPS_DMA0_INT_ID
   XPAR_XDMAPS_0_DONE_INTR_1=XPS_DMA1_INT_ID
   XPAR_XDMAPS_0_DONE_INTR_2=XPS_DMA2_INT_ID
   XPAR_XDMAPS_0_DONE_INTR_3=XPS_DMA3_INT_ID
   XPAR_XDMAPS_0_DONE_INTR_4=XPS_DMA4_INT_ID
   XPAR_XDMAPS_0_DONE_INTR_5=XPS_DMA5_INT_ID
   XPAR_XDMAPS_0_DONE_INTR_6=XPS_DMA6_INT_ID
   XPAR_XDMAPS_0_DONE_INTR_7=XPS_DMA7_INT_ID
   XPAR_XDMAPS_0_FAULT_INTR=XPS_DMA0_ABORT_INT_ID
   XPAR_XDMAPS_0_HIGHADDR=0xF8004FFF
   XPAR_XDMAPS_1_BASEADDR=0xF8003000
   XPAR_XDMAPS_1_DEVICE_ID=XPAR_PS7_DMA_S_DEVICE_ID
   XPAR_XDMAPS_1_HIGHADDR=0xF8003FFF
   XPAR_XDMAPS_NUM_INSTANCES=2
   XPAR_XEMACPS_0_INTR=XPS_GEM0_INT_ID
   XPAR_XEMACPS_0_WAKE_INTR=XPS_GEM0_WAKE_INT_ID
   XPAR_XEMACPS_1_INTR=XPS_GEM1_INT_ID
   XPAR_XEMACPS_1_WAKE_INTR=XPS_GEM1_WAKE_INT_ID
   XPAR_XGPIOPS_0_BASEADDR=0xE000A000
   XPAR_XGPIOPS_0_DEVICE_ID=XPAR_PS7_GPIO_0_DEVICE_ID
   XPAR_XGPIOPS_0_HIGHADDR=0xE000AFFF
   XPAR_XGPIOPS_0_INTR=XPS_GPIO_INT_ID
   XPAR_XGPIOPS_NUM_INSTANCES=1
   XPAR_XIICPS_0_BASEADDR=0xE0004000
   XPAR_XIICPS_0_CLOCK_HZ=XPAR_XIICPS_0_I2C_CLK_FREQ_HZ
   XPAR_XIICPS_0_DEVICE_ID=XPAR_PS7_I2C_0_DEVICE_ID
   XPAR_XIICPS_0_HIGHADDR=0xE0004FFF
   XPAR_XIICPS_0_I2C_CLK_FREQ_HZ=111111115
   XPAR_XIICPS_0_INTR=XPS_I2C0_INT_ID
   XPAR_XIICPS_1_CLOCK_HZ=XPAR_XIICPS_1_I2C_CLK_FREQ_HZ
   XPAR_XIICPS_1_INTR=XPS_I2C1_INT_ID
   XPAR_XIICPS_NUM_INSTANCES=1
   XPAR_XPARPORTPS_CTRL_BASEADDR=XPS_PARPORT_CRTL_BASEADDR
   XPAR_XQSPIPS_0_BASEADDR=0xE000D000
   XPAR_XQSPIPS_0_CLOCK_HZ=XPAR_XQSPIPS_0_QSPI_CLK_FREQ_HZ
   XPAR_XQSPIPS_0_DEVICE_ID=XPAR_PS7_QSPI_0_DEVICE_ID
   XPAR_XQSPIPS_0_HIGHADDR=0xE000DFFF
   XPAR_XQSPIPS_0_INTR=XPS_QSPI_INT_ID
   XPAR_XQSPIPS_0_LINEAR_BASEADDR=XPS_QSPI_LINEAR_BASEADDR
   XPAR_XQSPIPS_0_QSPI_CLK_FREQ_HZ=200000000
   XPAR_XQSPIPS_0_QSPI_MODE=0
   XPAR_XQSPIPS_NUM_INSTANCES=1
   XPAR_XSCUGIC_NUM_INSTANCES=1
   XPAR_XSCUTIMER_0_BASEADDR=0xF8F00600
   XPAR_XSCUTIMER_0_DEVICE_ID=XPAR_PS7_SCUTIMER_0_DEVICE_ID
   XPAR_XSCUTIMER_0_HIGHADDR=0xF8F0061F
   XPAR_XSCUTIMER_NUM_INSTANCES=1
   XPAR_XSCUWDT_NUM_INSTANCES=1
   XPAR_XSDIOPS_0_INTR=XPS_SDIO0_INT_ID
   XPAR_XSDIOPS_1_INTR=XPS_SDIO1_INT_ID
   XPAR_XSDPS_0_BASEADDR=0xE0100000
   XPAR_XSDPS_0_BUS_WIDTH=0
   XPAR_XSDPS_0_DEVICE_ID=XPAR_PS7_SD_0_DEVICE_ID
   XPAR_XSDPS_0_HAS_CD=1
   XPAR_XSDPS_0_HAS_EMIO=0
   XPAR_XSDPS_0_HAS_WP=1
   XPAR_XSDPS_0_HIGHADDR=0xE0100FFF
   XPAR_XSDPS_0_MIO_BANK=0
   XPAR_XSDPS_0_SDIO_CLK_FREQ_HZ=25000000
   XPAR_XSDPS_1_BASEADDR=0xE0101000
   XPAR_XSDPS_1_BUS_WIDTH=0
   XPAR_XSDPS_1_DEVICE_ID=XPAR_PS7_SD_1_DEVICE_ID
   XPAR_XSDPS_1_HAS_CD=1
   XPAR_XSDPS_1_HAS_EMIO=0
   XPAR_XSDPS_1_HAS_WP=1
   XPAR_XSDPS_1_HIGHADDR=0xE0101FFF
   XPAR_XSDPS_1_MIO_BANK=0
   XPAR_XSDPS_1_SDIO_CLK_FREQ_HZ=25000000
   XPAR_XSDPS_NUM_INSTANCES=2
   XPAR_XSLCR_0_BASEADDR=XPS_SYS_CTRL_BASEADDR
   XPAR_XSLCR_0_DEVICE_ID=0U
   XPAR_XSLCR_NUM_INSTANCES=1U
   XPAR_XSPIPS_0_INTR=XPS_SPI0_INT_ID
   XPAR_XSPIPS_1_INTR=XPS_SPI1_INT_ID
   XPAR_XSPI_NUM_INSTANCES=1
   XPAR_XTTCPS_0_CLOCK_HZ=XPAR_XTTCPS_0_TTC_CLK_FREQ_HZ
   XPAR_XTTCPS_0_INTR=XPS_TTC0_0_INT_ID
   XPAR_XTTCPS_1_CLOCK_HZ=XPAR_XTTCPS_1_TTC_CLK_FREQ_HZ
   XPAR_XTTCPS_1_INTR=XPS_TTC0_1_INT_ID
   XPAR_XTTCPS_2_CLOCK_HZ=XPAR_XTTCPS_2_TTC_CLK_FREQ_HZ
   XPAR_XTTCPS_2_INTR=XPS_TTC0_2_INT_ID
   XPAR_XTTCPS_3_CLOCK_HZ=XPAR_XTTCPS_3_TTC_CLK_FREQ_HZ
   XPAR_XTTCPS_3_INTR=XPS_TTC1_0_INT_ID
   XPAR_XTTCPS_4_CLOCK_HZ=XPAR_XTTCPS_4_TTC_CLK_FREQ_HZ
   XPAR_XTTCPS_4_INTR=XPS_TTC1_1_INT_ID
   XPAR_XTTCPS_5_CLOCK_HZ=XPAR_XTTCPS_5_TTC_CLK_FREQ_HZ
   XPAR_XTTCPS_5_INTR=XPS_TTC1_2_INT_ID
   XPAR_XUARTPS_0_BASEADDR=0xE0000000
   XPAR_XUARTPS_0_CLOCK_HZ=XPAR_XUARTPS_0_UART_CLK_FREQ_HZ
   XPAR_XUARTPS_0_DEVICE_ID=XPAR_PS7_UART_0_DEVICE_ID
   XPAR_XUARTPS_0_HAS_MODEM=1
   XPAR_XUARTPS_0_HIGHADDR=0xE0000FFF
   XPAR_XUARTPS_0_INTR=XPS_UART0_INT_ID
   XPAR_XUARTPS_0_UART_CLK_FREQ_HZ=100000000
   XPAR_XUARTPS_1_BASEADDR=0xE0001000
   XPAR_XUARTPS_1_CLOCK_HZ=XPAR_XUARTPS_1_UART_CLK_FREQ_HZ
   XPAR_XUARTPS_1_DEVICE_ID=XPAR_PS7_UART_1_DEVICE_ID
   XPAR_XUARTPS_1_HAS_MODEM=0
   XPAR_XUARTPS_1_HIGHADDR=0xE0001FFF
   XPAR_XUARTPS_1_INTR=XPS_UART1_INT_ID
   XPAR_XUARTPS_1_UART_CLK_FREQ_HZ=100000000
   XPAR_XUARTPS_NUM_INSTANCES=2
   XPAR_XUSBPS_0_BASEADDR=0xE0002000
   XPAR_XUSBPS_0_DEVICE_ID=XPAR_PS7_USB_0_DEVICE_ID
   XPAR_XUSBPS_0_HIGHADDR=0xE0002FFF
   XPAR_XUSBPS_0_INTR=XPS_USB0_INT_ID
   XPAR_XUSBPS_1_INTR=XPS_USB1_INT_ID
   XPAR_XUSBPS_NUM_INSTANCES=1
   XPAR_XVTC_NUM_INSTANCES=1
   XPAR_XWDTPS_0_INTR=XPS_WDT_INT_ID
   XPLATFORM_INFO_H=
   XPLAT_INFO_MASK=(0xF)
   XPLAT_MICROBLAZE=0x5
   XPLAT_ZYNQ=0x4
   XPLAT_ZYNQ_ULTRA_MP=0x1
   XPLAT_ZYNQ_ULTRA_MPQEMU=0x3
   XPLAT_ZYNQ_ULTRA_MPVEL=0x2
   XPLAT_ZYNQ_ULTRA_MP_SILICON=0x0
   XPSEUDO_ASM_GCC_H=
   XPSEUDO_ASM_H=
   XPS_AFI0_BASEADDR=0xF8008000U
   XPS_AFI1_BASEADDR=0xF8009000U
   XPS_AFI2_BASEADDR=0xF800A000U
   XPS_AFI3_BASEADDR=0xF800B000U
   XPS_CAN0_BASEADDR=0xE0008000U
   XPS_CAN0_INT_ID=60U
   XPS_CAN1_BASEADDR=0xE0009000U
   XPS_CAN1_INT_ID=83U
   XPS_CORESIGHT_BASEADDR=0xF8800000U
   XPS_CORE_PARITY0_INT_ID=32U
   XPS_CORE_PARITY1_INT_ID=33U
   XPS_DDR_CTRL_BASEADDR=0xF8006000U
   XPS_DEV_CFG_APB_BASEADDR=0xF8007000U
   XPS_DMA0_ABORT_INT_ID=45U
   XPS_DMA0_INT_ID=46U
   XPS_DMA1_INT_ID=47U
   XPS_DMA2_INT_ID=48U
   XPS_DMA3_INT_ID=49U
   XPS_DMA4_INT_ID=72U
   XPS_DMA5_INT_ID=73U
   XPS_DMA6_INT_ID=74U
   XPS_DMA7_INT_ID=75U
   XPS_DMAC0_NON_SEC_BASEADDR=0xF8004000U
   XPS_DMAC0_SEC_BASEADDR=0xF8003000U
   XPS_DVC_INT_ID=40U
   XPS_ECC_INT_ID=36U
   XPS_EFUSE_BASEADDR=0xF800D000U
   XPS_FIQ_INT_ID=28U
   XPS_FPGA0_INT_ID=61U
   XPS_FPGA10_INT_ID=86U
   XPS_FPGA11_INT_ID=87U
   XPS_FPGA12_INT_ID=88U
   XPS_FPGA13_INT_ID=89U
   XPS_FPGA14_INT_ID=90U
   XPS_FPGA15_INT_ID=91U
   XPS_FPGA1_INT_ID=62U
   XPS_FPGA2_INT_ID=63U
   XPS_FPGA3_INT_ID=64U
   XPS_FPGA4_INT_ID=65U
   XPS_FPGA5_INT_ID=66U
   XPS_FPGA6_INT_ID=67U
   XPS_FPGA7_INT_ID=68U
   XPS_FPGA8_INT_ID=84U
   XPS_FPGA9_INT_ID=85U
   XPS_FPGA_AXI_S0_BASEADDR=0x40000000U
   XPS_FPGA_AXI_S1_BASEADDR=0x80000000U
   XPS_GEM0_BASEADDR=0xE000B000U
   XPS_GEM0_INT_ID=54U
   XPS_GEM0_WAKE_INT_ID=55U
   XPS_GEM1_BASEADDR=0xE000C000U
   XPS_GEM1_INT_ID=77U
   XPS_GEM1_WAKE_INT_ID=78U
   XPS_GLOBAL_TMR_INT_ID=27U
   XPS_GPIO_BASEADDR=0xE000A000U
   XPS_GPIO_INT_ID=52U
   XPS_I2C0_BASEADDR=0xE0004000U
   XPS_I2C0_INT_ID=57U
   XPS_I2C1_BASEADDR=0xE0005000U
   XPS_I2C1_INT_ID=80U
   XPS_IOU_BUS_CFG_BASEADDR=0xE0200000U
   XPS_IOU_S_SWITCH_BASEADDR=0xE0000000U
   XPS_IRQ_INT_ID=31U
   XPS_L2CC_BASEADDR=0xF8F02000U
   XPS_L2CC_INT_ID=34U
   XPS_NAND_BASEADDR=0xE1000000U
   XPS_OCMINTR_INT_ID=35U
   XPS_OCM_BASEADDR=0xF800C000U
   XPS_PARPORT0_BASEADDR=0xE2000000U
   XPS_PARPORT1_BASEADDR=0xE4000000U
   XPS_PARPORT_CRTL_BASEADDR=0xE000E000U
   XPS_PERIPHERAL_BASEADDR=0xE0000000U
   XPS_PERIPH_APB_BASEADDR=0xF8000000U
   XPS_PMU0_INT_ID=37U
   XPS_PMU1_INT_ID=38U
   XPS_QSPI_BASEADDR=0xE000D000U
   XPS_QSPI_INT_ID=51U
   XPS_QSPI_LINEAR_BASEADDR=0xFC000000U
   XPS_SAM_RAM_BASEADDR=0xFFFC0000U
   XPS_SCU_PERIPH_BASE=0xF8F00000U
   XPS_SCU_TMR_INT_ID=29U
   XPS_SCU_WDT_INT_ID=30U
   XPS_SDIO0_BASEADDR=0xE0100000U
   XPS_SDIO0_INT_ID=56U
   XPS_SDIO1_BASEADDR=0xE0101000U
   XPS_SDIO1_INT_ID=79U
   XPS_SMC_INT_ID=50U
   XPS_SPI0_BASEADDR=0xE0006000U
   XPS_SPI0_INT_ID=58U
   XPS_SPI1_BASEADDR=0xE0007000U
   XPS_SPI1_INT_ID=81U
   XPS_SYSMON_INT_ID=39U
   XPS_SYS_CTRL_BASEADDR=0xF8000000U
   XPS_TOP_BUS_CFG_BASEADDR=0xF8900000U
   XPS_TTC0_0_INT_ID=42U
   XPS_TTC0_1_INT_ID=43U
   XPS_TTC0_2_INT_ID=44U
   XPS_TTC0_BASEADDR=0xF8001000U
   XPS_TTC1_0_INT_ID=69U
   XPS_TTC1_1_INT_ID=70U
   XPS_TTC1_2_INT_ID=71U
   XPS_TTC1_BASEADDR=0xF8002000U
   XPS_UART0_BASEADDR=0xE0000000U
   XPS_UART0_INT_ID=59U
   XPS_UART1_BASEADDR=0xE0001000U
   XPS_UART1_INT_ID=82U
   XPS_USB0_BASEADDR=0xE0002000U
   XPS_USB0_INT_ID=53U
   XPS_USB1_BASEADDR=0xE0003000U
   XPS_USB1_INT_ID=76U
   XPS_VERSION_1=0x0
   XPS_VERSION_2=0x1
   XPS_VERSION_INFO_MASK=(0xF)
   XPS_WDT_BASEADDR=0xF8005000U
   XPS_WDT_INT_ID=41U
   XREG_CORTEXA9_H=
   XREG_CP0=0
   XREG_CP10=10
   XREG_CP11=11
   XREG_CP12=12
   XREG_CP13=13
   XREG_CP14=14
   XREG_CP15=15
   XREG_CP15_AUXILARY_ID="p15, 1, %0,  c0,  c0, 7"
   XREG_CP15_AUX_CONTROL="p15, 0, %0,  c1,  c0, 1"
   XREG_CP15_AUX_DATA_FAULT_STATUS="p15, 0, %0,  c5,  c1, 0"
   XREG_CP15_AUX_INST_FAULT_STATUS="p15, 0, %0,  c5,  c1, 1"
   XREG_CP15_CACHE_LEVEL_ID="p15, 1, %0,  c0,  c0, 1"
   XREG_CP15_CACHE_SIZE_ID="p15, 1, %0,  c0,  c0, 0"
   XREG_CP15_CACHE_SIZE_SEL="p15, 2, %0,  c0,  c0, 0"
   XREG_CP15_CACHE_TYPE="p15, 0, %0,  c0,  c0, 1"
   XREG_CP15_CLEAN_DC_LINE_MVA_POC="p15, 0, %0,  c7, c10, 1"
   XREG_CP15_CLEAN_DC_LINE_MVA_POU="p15, 0, %0,  c7, c11, 1"
   XREG_CP15_CLEAN_DC_LINE_SW="p15, 0, %0,  c7, c10, 2"
   XREG_CP15_CLEAN_INVAL_DC_LINE_MVA_POC="p15, 0, %0,  c7, c14, 1"
   XREG_CP15_CLEAN_INVAL_DC_LINE_SW="p15, 0, %0,  c7, c14, 2"
   XREG_CP15_CONFIG_BASE_ADDR="p15, 4, %0, c15,  c0, 0"
   XREG_CP15_CONTEXT_ID="p15, 0, %0, c13,  c0, 1"
   XREG_CP15_CONTROL_AFE_BIT=0x20000000U
   XREG_CP15_CONTROL_A_BIT=0x00000002U
   XREG_CP15_CONTROL_B_BIT=0x00000080U
   XREG_CP15_CONTROL_C_BIT=0x00000004U
   XREG_CP15_CONTROL_EE_BIT=0x02000000U
   XREG_CP15_CONTROL_HA_BIT=0x00020000U
   XREG_CP15_CONTROL_I_BIT=0x00001000U
   XREG_CP15_CONTROL_M_BIT=0x00000001U
   XREG_CP15_CONTROL_NMFI_BIT=0x08000000U
   XREG_CP15_CONTROL_RR_BIT=0x00004000U
   XREG_CP15_CONTROL_SW_BIT=0x00000400U
   XREG_CP15_CONTROL_TE_BIT=0x40000000U
   XREG_CP15_CONTROL_TRE_BIT=0x10000000U
   XREG_CP15_CONTROL_V_BIT=0x00002000U
   XREG_CP15_CONTROL_Z_BIT=0x00000800U
   XREG_CP15_COUNT_ENABLE_CLR="p15, 0, %0,  c9, c12, 2"
   XREG_CP15_COUNT_ENABLE_SET="p15, 0, %0,  c9, c12, 1"
   XREG_CP15_CP_ACCESS_CONTROL="p15, 0, %0,  c1,  c0, 2"
   XREG_CP15_DATA_FAULT_ADDRESS="p15, 0, %0,  c6,  c0, 0"
   XREG_CP15_DATA_FAULT_STATUS="p15, 0, %0,  c5,  c0, 0"
   XREG_CP15_DATA_MEMORY_BARRIER="p15, 0, %0,  c7, c10, 5"
   XREG_CP15_DATA_SYNC_BARRIER="p15, 0, %0,  c7, c10, 4"
   XREG_CP15_DEBUG_FEATURE_0="p15, 0, %0,  c0,  c1, 2"
   XREG_CP15_DOMAIN_ACCESS_CTRL="p15, 0, %0,  c3,  c0, 0"
   XREG_CP15_EVENT_CNTR_SEL="p15, 0, %0,  c9, c12, 5"
   XREG_CP15_EVENT_TYPE_SEL="p15, 0, %0,  c9, c13, 1"
   XREG_CP15_INST_FAULT_ADDRESS="p15, 0, %0,  c6,  c0, 2"
   XREG_CP15_INST_FAULT_STATUS="p15, 0, %0,  c5,  c0, 1"
   XREG_CP15_INST_FEATURE_0="p15, 0, %0,  c0,  c2, 0"
   XREG_CP15_INST_FEATURE_1="p15, 0, %0,  c0,  c2, 1"
   XREG_CP15_INST_FEATURE_2="p15, 0, %0,  c0,  c2, 2"
   XREG_CP15_INST_FEATURE_3="p15, 0, %0,  c0,  c2, 3"
   XREG_CP15_INST_FEATURE_4="p15, 0, %0,  c0,  c2, 4"
   XREG_CP15_INST_SYNC_BARRIER="p15, 0, %0,  c7,  c5, 4"
   XREG_CP15_INTERRUPT_STATUS="p15, 0, %0, c12,  c1, 0"
   XREG_CP15_INTR_ENABLE_CLR="p15, 0, %0,  c9, c14, 2"
   XREG_CP15_INTR_ENABLE_SET="p15, 0, %0,  c9, c14, 1"
   XREG_CP15_INVAL_BRANCH_ARRAY="p15, 0, %0,  c7,  c5, 6"
   XREG_CP15_INVAL_BRANCH_ARRAY_IS="p15, 0, %0,  c7,  c1, 6"
   XREG_CP15_INVAL_DC_LINE_MVA_POC="p15, 0, %0,  c7,  c6, 1"
   XREG_CP15_INVAL_DC_LINE_SW="p15, 0, %0,  c7,  c6, 2"
   XREG_CP15_INVAL_DTLB_ASID="p15, 0, %0,  c8,  c6, 2"
   XREG_CP15_INVAL_DTLB_MVA="p15, 0, %0,  c8,  c6, 1"
   XREG_CP15_INVAL_DTLB_UNLOCKED="p15, 0, %0,  c8,  c6, 0"
   XREG_CP15_INVAL_IC_LINE_MVA_POU="p15, 0, %0,  c7,  c5, 1"
   XREG_CP15_INVAL_IC_POU="p15, 0, %0,  c7,  c5, 0"
   XREG_CP15_INVAL_IC_POU_IS="p15, 0, %0,  c7,  c1, 0"
   XREG_CP15_INVAL_ITLB_ASID="p15, 0, %0,  c8,  c5, 2"
   XREG_CP15_INVAL_ITLB_MVA="p15, 0, %0,  c8,  c5, 1"
   XREG_CP15_INVAL_ITLB_UNLOCKED="p15, 0, %0,  c8,  c5, 0"
   XREG_CP15_INVAL_TLB_ASID_IS="p15, 0, %0,  c8,  c3, 2"
   XREG_CP15_INVAL_TLB_IS="p15, 0, %0,  c8,  c3, 0"
   XREG_CP15_INVAL_TLB_MVA_ASID_IS="p15, 0, %0,  c8,  c3, 3"
   XREG_CP15_INVAL_TLB_MVA_IS="p15, 0, %0,  c8,  c3, 1"
   XREG_CP15_INVAL_UTLB_ASID="p15, 0, %0,  c8,  c7, 2"
   XREG_CP15_INVAL_UTLB_MVA="p15, 0, %0,  c8,  c7, 1"
   XREG_CP15_INVAL_UTLB_MVA_ASID="p15, 0, %0,  c8,  c7, 3"
   XREG_CP15_INVAL_UTLB_UNLOCKED="p15, 0, %0,  c8,  c7, 0"
   XREG_CP15_MAIN_ID="p15, 0, %0,  c0,  c0, 0"
   XREG_CP15_MAIN_TLB_ATTR="p15, 5, %0, c15,  c7, 2"
   XREG_CP15_MAIN_TLB_PA="p15, 5, %0, c15,  c6, 2"
   XREG_CP15_MAIN_TLB_VA="p15, 5, %0, c15,  c5, 2"
   XREG_CP15_MEMORY_FEATURE_0="p15, 0, %0,  c0,  c1, 4"
   XREG_CP15_MEMORY_FEATURE_1="p15, 0, %0,  c0,  c1, 5"
   XREG_CP15_MEMORY_FEATURE_2="p15, 0, %0,  c0,  c1, 6"
   XREG_CP15_MEMORY_FEATURE_3="p15, 0, %0,  c0,  c1, 7"
   XREG_CP15_MONITOR_VEC_BASE_ADDR="p15, 0, %0, c12,  c0, 1"
   XREG_CP15_MULTI_PROC_AFFINITY="p15, 0, %0,  c0,  c0, 5"
   XREG_CP15_NOP2="p15, 0, %0,  c7, c13, 1"
   XREG_CP15_NOP="p15, 0, %0,  c7,  c0, 4"
   XREG_CP15_NORM_MEM_REMAP="p15, 0, %0, c10,  c2, 1"
   XREG_CP15_NS_ACCESS_CONTROL="p15, 0, %0,  c1,  c1, 2"
   XREG_CP15_PERF_CYCLE_COUNTER="p15, 0, %0,  c9, c13, 0"
   XREG_CP15_PERF_MONITOR_COUNT="p15, 0, %0,  c9, c13, 2"
   XREG_CP15_PERF_MONITOR_CTRL="p15, 0, %0,  c9, c12, 0"
   XREG_CP15_PHYS_ADDR="p15, 0, %0,  c7,  c4, 0"
   XREG_CP15_POWER_CTRL="p15, 0, %0, c15,  c0, 0"
   XREG_CP15_PRI_MEM_REMAP="p15, 0, %0, c10,  c2, 0"
   XREG_CP15_PROC_FEATURE_0="p15, 0, %0,  c0,  c1, 0"
   XREG_CP15_PROC_FEATURE_1="p15, 0, %0,  c0,  c1, 1"
   XREG_CP15_READ_TLB_ENTRY="p15, 5, %0, c15,  c4, 2"
   XREG_CP15_SECURE_CONFIG="p15, 0, %0,  c1,  c1, 0"
   XREG_CP15_SECURE_DEBUG_ENABLE="p15, 0, %0,  c1,  c1, 1"
   XREG_CP15_SW_INC="p15, 0, %0,  c9, c12, 4"
   XREG_CP15_SYS_CONTROL="p15, 0, %0,  c1,  c0, 0"
   XREG_CP15_TCM_TYPE="p15, 0, %0,  c0,  c0, 2"
   XREG_CP15_TLB_LOCKDWN="p15, 0, %0, c10,  c0, 0"
   XREG_CP15_TLB_TYPE="p15, 0, %0,  c0,  c0, 3"
   XREG_CP15_TTBR0="p15, 0, %0,  c2,  c0, 0"
   XREG_CP15_TTBR1="p15, 0, %0,  c2,  c0, 1"
   XREG_CP15_TTB_CONTROL="p15, 0, %0,  c2,  c0, 2"
   XREG_CP15_USER_ENABLE="p15, 0, %0,  c9, c14, 0"
   XREG_CP15_VA_TO_PA_CURRENT_0="p15, 0, %0,  c7,  c8, 0"
   XREG_CP15_VA_TO_PA_CURRENT_1="p15, 0, %0,  c7,  c8, 1"
   XREG_CP15_VA_TO_PA_CURRENT_2="p15, 0, %0,  c7,  c8, 2"
   XREG_CP15_VA_TO_PA_CURRENT_3="p15, 0, %0,  c7,  c8, 3"
   XREG_CP15_VA_TO_PA_OTHER_0="p15, 0, %0,  c7,  c8, 4"
   XREG_CP15_VA_TO_PA_OTHER_1="p15, 0, %0,  c7,  c8, 5"
   XREG_CP15_VA_TO_PA_OTHER_2="p15, 0, %0,  c7,  c8, 6"
   XREG_CP15_VA_TO_PA_OTHER_3="p15, 0, %0,  c7,  c8, 7"
   XREG_CP15_VEC_BASE_ADDR="p15, 0, %0, c12,  c0, 0"
   XREG_CP15_VIRTUALIZATION_INTR="p15, 0, %0, c12,  c1, 1"
   XREG_CP15_VIRTUAL_CONTROL="p15, 0, %0,  c1,  c1, 3"
   XREG_CP15_V_FLAG_STATUS="p15, 0, %0,  c9, c12, 3"
   XREG_CP15_WRITE_TLB_ENTRY="p15, 5, %0, c15,  c4, 4"
   XREG_CP1=1
   XREG_CP2=2
   XREG_CP3=3
   XREG_CP4=4
   XREG_CP5=5
   XREG_CP6=6
   XREG_CP7=7
   XREG_CP8=8
   XREG_CP9=9
   XREG_CPSR=cpsr
   XREG_CPSR_C_BIT=0x20000000
   XREG_CPSR_DATA_ABORT_MODE=0x17
   XREG_CPSR_FIQ_ENABLE=0x40
   XREG_CPSR_FIQ_MODE=0x11
   XREG_CPSR_IRQ_ENABLE=0x80
   XREG_CPSR_IRQ_MODE=0x12
   XREG_CPSR_MODE_BITS=0x1F
   XREG_CPSR_N_BIT=0x80000000
   XREG_CPSR_SVC_MODE=0x13
   XREG_CPSR_SYSTEM_MODE=0x1F
   XREG_CPSR_THUMB_MODE=0x20
   XREG_CPSR_UNDEFINED_MODE=0x1B
   XREG_CPSR_USER_MODE=0x10
   XREG_CPSR_V_BIT=0x10000000
   XREG_CPSR_Z_BIT=0x40000000
   XREG_CR0=cr0
   XREG_CR10=cr10
   XREG_CR11=cr11
   XREG_CR12=cr12
   XREG_CR13=cr13
   XREG_CR14=cr14
   XREG_CR15=cr15
   XREG_CR1=cr1
   XREG_CR2=cr2
   XREG_CR3=cr3
   XREG_CR4=cr4
   XREG_CR5=cr5
   XREG_CR6=cr6
   XREG_CR7=cr7
   XREG_CR8=cr8
   XREG_CR9=cr9
   XREG_FPEXC=c8
   XREG_FPEXC_DEX=(1 << 29)
   XREG_FPEXC_EN=(1 << 30)
   XREG_FPEXC_EX=(1 << 31)
   XREG_FPINST2=c10
   XREG_FPINST=c9
   XREG_FPSCR=c1
   XREG_FPSCR_AHP=(1 << 26)
   XREG_FPSCR_C_BIT=(1 << 29)
   XREG_FPSCR_DEFAULT_NAN=(1 << 25)
   XREG_FPSCR_DZC=(1 << 1)
   XREG_FPSCR_FLUSHTOZERO=(1 << 24)
   XREG_FPSCR_IDC=(1 << 7)
   XREG_FPSCR_IOC=(1 << 0)
   XREG_FPSCR_IXC=(1 << 4)
   XREG_FPSCR_LENGTH_BIT=(16)
   XREG_FPSCR_LENGTH_MASK=(7 << FPSCR_LENGTH_BIT)
   XREG_FPSCR_N_BIT=(1 << 31)
   XREG_FPSCR_OFC=(1 << 2)
   XREG_FPSCR_QC=(1 << 27)
   XREG_FPSCR_RMODE_BIT=(22)
   XREG_FPSCR_RMODE_MASK=(3 << FPSCR_RMODE_BIT)
   XREG_FPSCR_ROUND_MINUSINF=(2 << 22)
   XREG_FPSCR_ROUND_NEAREST=(0 << 22)
   XREG_FPSCR_ROUND_PLUSINF=(1 << 22)
   XREG_FPSCR_ROUND_TOZERO=(3 << 22)
   XREG_FPSCR_STRIDE_BIT=(20)
   XREG_FPSCR_STRIDE_MASK=(3 << FPSCR_STRIDE_BIT)
   XREG_FPSCR_UFC=(1 << 3)
   XREG_FPSCR_V_BIT=(1 << 28)
   XREG_FPSCR_Z_BIT=(1 << 30)
   XREG_FPSID=c0
   XREG_FPSID_ARCH_BIT=(16)
   XREG_FPSID_ARCH_MASK=(0xF << FPSID_ARCH_BIT)
   XREG_FPSID_IMPLEMENTER_BIT=(24)
   XREG_FPSID_IMPLEMENTER_MASK=(0xFF << FPSID_IMPLEMENTER_BIT)
   XREG_FPSID_PART_BIT=(8)
   XREG_FPSID_PART_MASK=(0xFF << FPSID_PART_BIT)
   XREG_FPSID_REV_BIT=(0)
   XREG_FPSID_REV_MASK=(0xF << FPSID_REV_BIT)
   XREG_FPSID_SOFTWARE=(1<<23)
   XREG_FPSID_VARIANT_BIT=(4)
   XREG_FPSID_VARIANT_MASK=(0xF << FPSID_VARIANT_BIT)
   XREG_GPR0=r0
   XREG_GPR10=r10
   XREG_GPR11=r11
   XREG_GPR12=r12
   XREG_GPR13=r13
   XREG_GPR14=r14
   XREG_GPR15=r15
   XREG_GPR1=r1
   XREG_GPR2=r2
   XREG_GPR3=r3
   XREG_GPR4=r4
   XREG_GPR5=r5
   XREG_GPR6=r6
   XREG_GPR7=r7
   XREG_GPR8=r8
   XREG_GPR9=r9
   XREG_MVFR0=c7
   XREG_MVFR0_A_SIMD_BIT=(0)
   XREG_MVFR0_A_SIMD_MASK=(0xF << MVFR0_A_SIMD_BIT)
   XREG_MVFR0_DIVIDE_BIT=(16)
   XREG_MVFR0_DIVIDE_MASK=(0xF << XREG_MVFR0_DIVIDE_BIT)
   XREG_MVFR0_DP_BIT=(8)
   XREG_MVFR0_DP_MASK=(0xF << XREG_MVFR0_DP_BIT)
   XREG_MVFR0_EXEC_TRAP_BIT=(12)
   XREG_MVFR0_EXEC_TRAP_MASK=(0xF << XREG_MVFR0_EXEC_TRAP_BIT)
   XREG_MVFR0_RMODE_BIT=(28)
   XREG_MVFR0_RMODE_MASK=(0xF << XREG_MVFR0_RMODE_BIT)
   XREG_MVFR0_SHORT_VEC_BIT=(24)
   XREG_MVFR0_SHORT_VEC_MASK=(0xF << XREG_MVFR0_SHORT_VEC_BIT)
   XREG_MVFR0_SP_BIT=(4)
   XREG_MVFR0_SP_MASK=(0xF << XREG_MVFR0_SP_BIT)
   XREG_MVFR0_SQRT_BIT=(20)
   XREG_MVFR0_SQRT_MASK=(0xF << XREG_MVFR0_SQRT_BIT)
   XREG_MVFR1=c6
   XSpi_Disable(InstancePtr)=XSpi_SetControlReg((InstancePtr), XSpi_GetControlReg((InstancePtr)) & ~XSP_CR_ENABLE_MASK)
   XSpi_Enable(InstancePtr)={ u16 Control; Control = XSpi_GetControlReg((InstancePtr)); Control |= XSP_CR_ENABLE_MASK; Control &= ~XSP_CR_TRANS_INHIBIT_MASK; XSpi_SetControlReg((InstancePtr), Control); }
   XSpi_GetControlReg(InstancePtr)=XSpi_ReadReg(((InstancePtr)->BaseAddr), XSP_CR_OFFSET)
   XSpi_GetSlaveSelectReg(InstancePtr)=XSpi_ReadReg((InstancePtr)->BaseAddr, XSP_SSR_OFFSET)
   XSpi_GetStatusReg(InstancePtr)=XSpi_ReadReg(((InstancePtr)->BaseAddr), XSP_SR_OFFSET)
   XSpi_GetXipControlReg(InstancePtr)=XSpi_ReadReg(((InstancePtr)->BaseAddr), XSP_CR_OFFSET)
   XSpi_GetXipStatusReg(InstancePtr)=XSpi_ReadReg(((InstancePtr)->BaseAddr), XSP_SR_OFFSET)
   XSPI_H=
   XSpi_In32=Xil_In32
   XSpi_IntrClear(InstancePtr,ClearMask)=XSpi_WriteReg(((InstancePtr)->BaseAddr), XSP_IISR_OFFSET, XSpi_IntrGetStatus(InstancePtr) | (ClearMask))
   XSpi_IntrDisable(InstancePtr,DisableMask)=XSpi_WriteReg(((InstancePtr)->BaseAddr), XSP_IIER_OFFSET, XSpi_ReadReg(((InstancePtr)->BaseAddr), XSP_IIER_OFFSET) & (~ ((DisableMask) & XSP_INTR_ALL )))
   XSpi_IntrEnable(InstancePtr,EnableMask)=XSpi_WriteReg(((InstancePtr)->BaseAddr), XSP_IIER_OFFSET, (XSpi_ReadReg(((InstancePtr)->BaseAddr), XSP_IIER_OFFSET)) | (((EnableMask) & XSP_INTR_ALL )))
   XSpi_IntrGetEnabled(InstancePtr)=XSpi_ReadReg(((InstancePtr)->BaseAddr), XSP_IIER_OFFSET)
   XSpi_IntrGetStatus(InstancePtr)=XSpi_ReadReg(((InstancePtr)->BaseAddr), XSP_IISR_OFFSET)
   XSpi_IntrGlobalDisable(InstancePtr)=XSpi_WriteReg(((InstancePtr)->BaseAddr), XSP_DGIER_OFFSET, 0)
   XSpi_IntrGlobalEnable(InstancePtr)=XSpi_WriteReg(((InstancePtr)->BaseAddr), XSP_DGIER_OFFSET, XSP_GINTR_ENABLE_MASK)
   XSpi_IsIntrGlobalEnabled(InstancePtr)=(XSpi_ReadReg(((InstancePtr)->BaseAddr), XSP_DGIER_OFFSET) == XSP_GINTR_ENABLE_MASK)
   XSPI_L_H=
   XSpi_Out32=Xil_Out32
   XSpi_ReadReg(BaseAddress,RegOffset)=XSpi_In32((BaseAddress) + (RegOffset))
   XSpi_SetControlReg(InstancePtr,Mask)=XSpi_WriteReg(((InstancePtr)->BaseAddr), XSP_CR_OFFSET, (Mask))
   XSpi_SetSlaveSelectReg(InstancePtr,Mask)=XSpi_WriteReg(((InstancePtr)->BaseAddr), XSP_SSR_OFFSET, (Mask))
   XSpi_SetXipControlReg(InstancePtr,Mask)=XSpi_WriteReg(((InstancePtr)->BaseAddr), XSP_CR_OFFSET, (Mask))
   XSpi_WriteReg(BaseAddress,RegOffset,RegisterValue)=XSpi_Out32((BaseAddress) + (RegOffset), (RegisterValue))
   XSP_CLK_ACTIVE_LOW_OPTION=0x2
   XSP_CLK_PHASE_1_OPTION=0x4
   XSP_CR_CLK_PHASE_MASK=0x00000010
   XSP_CR_CLK_POLARITY_MASK=0x00000008
   XSP_CR_ENABLE_MASK=0x00000002
   XSP_CR_LOOPBACK_MASK=0x00000001
   XSP_CR_LSB_MSB_FIRST_MASK=0x00000200
   XSP_CR_MANUAL_SS_MASK=0x00000080
   XSP_CR_MASTER_MODE_MASK=0x00000004
   XSP_CR_OFFSET=0x60
   XSP_CR_RXFIFO_RESET_MASK=0x00000040
   XSP_CR_TRANS_INHIBIT_MASK=0x00000100
   XSP_CR_TXFIFO_RESET_MASK=0x00000020
   XSP_CR_XIP_CLK_PHASE_MASK=0x00000001
   XSP_CR_XIP_CLK_POLARITY_MASK=0x00000002
   XSP_DATAWIDTH_BYTE=8
   XSP_DATAWIDTH_HALF_WORD=16
   XSP_DATAWIDTH_WORD=32
   XSP_DGIER_OFFSET=0x1C
   XSP_DRR_OFFSET=0x6C
   XSP_DTR_OFFSET=0x68
   XSP_DUAL_MODE=1
   XSP_GINTR_ENABLE_MASK=0x80000000
   XSP_IIER_OFFSET=0x28
   XSP_IISR_OFFSET=0x20
   XSP_INTR_ALL=(XSP_INTR_MODE_FAULT_MASK | XSP_INTR_SLAVE_MODE_FAULT_MASK | XSP_INTR_TX_EMPTY_MASK | XSP_INTR_TX_UNDERRUN_MASK | XSP_INTR_RX_FULL_MASK | XSP_INTR_TX_HALF_EMPTY_MASK | XSP_INTR_RX_OVERRUN_MASK | XSP_INTR_SLAVE_MODE_MASK | XSP_INTR_RX_NOT_EMPTY_MASK | XSP_INTR_CMD_ERR_MASK | XSP_INTR_LOOP_BACK_ERR_MASK | XSP_INTR_MSB_ERR_MASK | XSP_INTR_SLAVE_MODE_ERR_MASK | XSP_INTR_CPOL_CPHA_ERR_MASK)
   XSP_INTR_CMD_ERR_MASK=0x00002000
   XSP_INTR_CPOL_CPHA_ERR_MASK=0x00000200
   XSP_INTR_DFT_MASK=(XSP_INTR_MODE_FAULT_MASK | XSP_INTR_TX_UNDERRUN_MASK | XSP_INTR_RX_OVERRUN_MASK | XSP_INTR_SLAVE_MODE_FAULT_MASK | XSP_INTR_CMD_ERR_MASK)
   XSP_INTR_LOOP_BACK_ERR_MASK=0x00001000
   XSP_INTR_MODE_FAULT_MASK=0x00000001
   XSP_INTR_MSB_ERR_MASK=0x00000800
   XSP_INTR_RX_FULL_MASK=0x00000010
   XSP_INTR_RX_NOT_EMPTY_MASK=0x00000100
   XSP_INTR_RX_OVERRUN_MASK=0x00000020
   XSP_INTR_SLAVE_MODE_ERR_MASK=0x00000400
   XSP_INTR_SLAVE_MODE_FAULT_MASK=0x00000002
   XSP_INTR_SLAVE_MODE_MASK=0x00000080
   XSP_INTR_TX_EMPTY_MASK=0x00000004
   XSP_INTR_TX_HALF_EMPTY_MASK=0x00000040
   XSP_INTR_TX_UNDERRUN_MASK=0x00000008
   XSP_LOOPBACK_OPTION=0x8
   XSP_MANUAL_SSELECT_OPTION=0x10
   XSP_MASTER_OPTION=0x1
   XSP_QUAD_MODE=2
   XSP_RFO_MASK=0x0000001F
   XSP_RFO_OFFSET=0x78
   XSP_SRR_OFFSET=0x40
   XSP_SRR_RESET_MASK=0x0000000A
   XSP_SR_CMD_ERR_MASK=0x00000400
   XSP_SR_CPOL_CPHA_ERR_MASK=0x00000040
   XSP_SR_LOOP_BACK_ERR_MASK=0x00000200
   XSP_SR_MODE_FAULT_MASK=0x00000010
   XSP_SR_MSB_ERR_MASK=0x00000100
   XSP_SR_OFFSET=0x64
   XSP_SR_RX_EMPTY_MASK=0x00000001
   XSP_SR_RX_FULL_MASK=0x00000002
   XSP_SR_SLAVE_MODE_ERR_MASK=0x00000080
   XSP_SR_SLAVE_MODE_MASK=0x00000020
   XSP_SR_TX_EMPTY_MASK=0x00000004
   XSP_SR_TX_FULL_MASK=0x00000008
   XSP_SR_XIP_AXI_ERROR_MASK=0x00000010
   XSP_SR_XIP_CPHPL_ERROR_MASK=0x00000008
   XSP_SR_XIP_MASTER_MODF_MASK=0x00000004
   XSP_SR_XIP_RX_EMPTY_MASK=0x00000001
   XSP_SR_XIP_RX_FULL_MASK=0x00000002
   XSP_SSR_OFFSET=0x70
   XSP_STANDARD_MODE=0
   XSP_TFO_MASK=0x0000001F
   XSP_TFO_OFFSET=0x74
   XSTATUS_H=
   XST_ATMC_ERROR_COUNT_MAX=1101L
   XST_BUFFER_TOO_SMALL=12L
   XST_DATA_LOST=26L
   XST_DEVICE_BLOCK_NOT_FOUND=3L
   XST_DEVICE_BUSY=21L
   XST_DEVICE_IS_STARTED=5L
   XST_DEVICE_IS_STOPPED=6L
   XST_DEVICE_NOT_FOUND=2L
   XST_DMA_BD_ERROR=527L
   XST_DMA_ERROR=9L
   XST_DMA_RESET_REGISTER_ERROR=512L
   XST_DMA_SG_BD_LOCKED=518L
   XST_DMA_SG_BD_NOT_COMMITTED=524L
   XST_DMA_SG_COUNT_EXCEEDED=521L
   XST_DMA_SG_IS_STARTED=514L
   XST_DMA_SG_IS_STOPPED=515L
   XST_DMA_SG_LIST_EMPTY=513L
   XST_DMA_SG_LIST_ERROR=526L
   XST_DMA_SG_LIST_EXISTS=522L
   XST_DMA_SG_LIST_FULL=517L
   XST_DMA_SG_NOTHING_TO_COMMIT=519L
   XST_DMA_SG_NO_DATA=525L
   XST_DMA_SG_NO_LIST=523L
   XST_DMA_TRANSFER_ERROR=511L
   XST_EMAC_COLLISION_ERROR=1007L
   XST_EMAC_MEMORY_ALLOC_ERROR=1002L
   XST_EMAC_MEMORY_SIZE_ERROR=1001L
   XST_EMAC_MII_BUSY=1004L
   XST_EMAC_MII_READ_ERROR=1003L
   XST_EMAC_OUT_OF_BUFFERS=1005L
   XST_EMAC_PARSE_ERROR=1006L
   XST_ERROR_COUNT_MAX=22L
   XST_FAILURE=1L
   XST_FIFO_ERROR=7L
   XST_FIFO_NO_ROOM=11L
   XST_FLASH_ADDRESS_ERROR=1135L
   XST_FLASH_ALIGNMENT_ERROR=1136L
   XST_FLASH_BLOCKING_CALL_ERROR=1137L
   XST_FLASH_BUSY=1126L
   XST_FLASH_CFI_QUERY_ERROR=1138L
   XST_FLASH_ERASE_SUSPENDED=1129L
   XST_FLASH_ERROR=1128L
   XST_FLASH_NOT_SUPPORTED=1132L
   XST_FLASH_PART_NOT_SUPPORTED=1131L
   XST_FLASH_READY=1127L
   XST_FLASH_TIMEOUT_ERROR=1134L
   XST_FLASH_TOO_MANY_REGIONS=1133L
   XST_FLASH_WRITE_SUSPENDED=1130L
   XST_FR_BUF_LOCKED=1402
   XST_FR_NO_BUF=1403
   XST_FR_TX_BUSY=1401
   XST_FR_TX_ERROR=1400
   XST_HWICAP_WRITE_DONE=1421
   XST_IIC_ADR_READBACK_ERROR=1086
   XST_IIC_BUS_BUSY=1077
   XST_IIC_CR_READBACK_ERROR=1083
   XST_IIC_DRR_READBACK_ERROR=1085
   XST_IIC_DTR_READBACK_ERROR=1084
   XST_IIC_GENERAL_CALL_ADDRESS=1078
   XST_IIC_NOT_SLAVE=1088
   XST_IIC_RX_FIFO_REG_RESET_ERROR=1081
   XST_IIC_SELFTEST_FAILED=1076
   XST_IIC_STAND_REG_RESET_ERROR=1079
   XST_IIC_TBA_READBACK_ERROR=1087
   XST_IIC_TBA_REG_RESET_ERROR=1082
   XST_IIC_TX_FIFO_REG_RESET_ERROR=1080
   XST_INTC_CONNECT_ERROR=1202
   XST_INTC_FAIL_SELFTEST=1201
   XST_INVALID_PARAM=15L
   XST_INVALID_VERSION=4L
   XST_IPIF_DEVICE_ACK_ERROR=534L
   XST_IPIF_DEVICE_ENABLE_ERROR=535L
   XST_IPIF_DEVICE_ID_ERROR=540L
   XST_IPIF_DEVICE_PENDING_ERROR=539L
   XST_IPIF_DEVICE_STATUS_ERROR=533L
   XST_IPIF_ERROR=541L
   XST_IPIF_IP_ACK_ERROR=537L
   XST_IPIF_IP_ENABLE_ERROR=538L
   XST_IPIF_IP_STATUS_ERROR=536L
   XST_IPIF_REG_WIDTH_ERROR=531L
   XST_IPIF_RESET_REGISTER_ERROR=532L
   XST_IS_STARTED=23L
   XST_IS_STOPPED=24L
   XST_LOOPBACK_ERROR=17L
   XST_MEMTEST_FAILED=401L
   XST_NAND_ADDRESS_ERROR=1447L
   XST_NAND_ALIGNMENT_ERROR=1448L
   XST_NAND_BUSY=1441L
   XST_NAND_CACHE_ERROR=1450L
   XST_NAND_ERROR=1443L
   XST_NAND_OPT_NOT_SUPPORTED=1445L
   XST_NAND_PARAM_PAGE_ERROR=1449L
   XST_NAND_PART_NOT_SUPPORTED=1444L
   XST_NAND_READY=1442L
   XST_NAND_TIMEOUT_ERROR=1446L
   XST_NAND_WRITE_PROTECTED=1451L
   XST_NOT_ENABLED=29L
   XST_NOT_INTERRUPT=20L
   XST_NOT_POLLED=10L
   XST_NOT_SGDMA=16L
   XST_NO_CALLBACK=18L
   XST_NO_DATA=13L
   XST_NO_FEATURE=19L
   XST_OPB2PLB_FAIL_SELFTEST=1326L
   XST_OPBARB_INVALID_PRIORITY=1176
   XST_OPBARB_NOT_FIXED_PRIORITY=1179
   XST_OPBARB_NOT_SUSPENDED=1177
   XST_OPBARB_PARK_NOT_ENABLED=1178
   XST_PCI_INVALID_ADDRESS=1361L
   XST_PFIFO_BAD_REG_VALUE=503L
   XST_PFIFO_DEADLOCK=505L
   XST_PFIFO_ERROR=504L
   XST_PFIFO_LACK_OF_DATA=501L
   XST_PFIFO_NO_ROOM=502L
   XST_PLB2OPB_FAIL_SELFTEST=1301L
   XST_PLBARB_FAIL_SELFTEST=1276L
   XST_RECV_ERROR=27L
   XST_REGISTER_ERROR=14L
   XST_RESET_ERROR=8L
   XST_SEND_ERROR=28L
   XST_SPI_COMMAND_ERROR=1162
   XST_SPI_MODE_FAULT=1151
   XST_SPI_NOT_MASTER=1157
   XST_SPI_NO_SLAVE=1155
   XST_SPI_POLL_DONE=1163
   XST_SPI_RECEIVE_NOT_EMPTY=1161
   XST_SPI_RECEIVE_OVERRUN=1154
   XST_SPI_SLAVE_MODE=1160
   XST_SPI_SLAVE_MODE_FAULT=1159
   XST_SPI_SLAVE_ONLY=1158
   XST_SPI_TOO_MANY_SLAVES=1156
   XST_SPI_TRANSFER_DONE=1152
   XST_SPI_TRANSMIT_UNDERRUN=1153
   XST_SUCCESS=0L
   XST_SYSACE_NO_LOCK=1351L
   XST_TMRCTR_TIMER_FAILED=1226
   XST_UART=
   XST_UART_BAUD_ERROR=1055L
   XST_UART_BAUD_RANGE=1056L
   XST_UART_CONFIG_ERROR=1053L
   XST_UART_INIT_ERROR=1051L
   XST_UART_START_ERROR=1052L
   XST_UART_TEST_FAIL=1054L
   XST_USB_ALREADY_CONFIGURED=1410
   XST_USB_BUF_ALIGN_ERROR=1411
   XST_USB_BUF_TOO_BIG=1413
   XST_USB_NO_BUF=1414
   XST_USB_NO_DESC_AVAILABLE=1412
   XST_VDMA_MISMATCH_ERROR=1430
   XST_WDTTB_TIMER_FAILED=1251L
   XUINT64_LSW(x)=((x).Lower)
   XUINT64_MSW(x)=((x).Upper)
   XVTC_ASIZE_HORI_MASK=0x00001FFF
   XVTC_ASIZE_VERT_MASK=0x1FFF0000
   XVTC_ASIZE_VERT_SHIFT=16
   XVTC_CTL=XVTC_CTL_OFFSET
   XVTC_CTL_ACPSS_MASK=0x02000000
   XVTC_CTL_ALLSS_MASK=0x03FDEF00
   XVTC_CTL_AVPSS_MASK=0x01000000
   XVTC_CTL_DE_MASK=0x00000008
   XVTC_CTL_FIPSS_MASK=0x04000000
   XVTC_CTL_GE_MASK=0x00000004
   XVTC_CTL_HBPSS_MASK=0x00200000
   XVTC_CTL_HBSS_MASK=0x00000800
   XVTC_CTL_HFSS_MASK=0x00000200
   XVTC_CTL_HSPSS_MASK=0x00800000
   XVTC_CTL_HSSS_MASK=0x00000400
   XVTC_CTL_HTSS_MASK=0x00000100
   XVTC_CTL_INTERLACE_MASK=0x00080000
   XVTC_CTL_OFFSET=0x000
   XVTC_CTL_RESET_MASK=0x80000000
   XVTC_CTL_RU_MASK=0x00000002
   XVTC_CTL_SE_MASK=0x00000020
   XVTC_CTL_SRST_MASK=0x40000000
   XVTC_CTL_SW_MASK=0x00000001
   XVTC_CTL_VASS_MASK=0x00020000
   XVTC_CTL_VBPSS_MASK=0x00100000
   XVTC_CTL_VBSS_MASK=0x00010000
   XVTC_CTL_VCSS_MASK=0x00040000
   XVTC_CTL_VFSS_MASK=0x00004000
   XVTC_CTL_VSPSS_MASK=0x00400000
   XVTC_CTL_VSSS_MASK=0x00008000
   XVTC_CTL_VTSS_MASK=0x00002000
   XVTC_DASIZE=XVTC_DASIZE_OFFSET
   XVTC_DASIZE_OFFSET=0x020
   XVTC_DFENC=XVTC_DFENC_OFFSET
   XVTC_DFENC_OFFSET=0x028
   XVTC_DHSIZE=XVTC_DHSIZE_OFFSET
   XVTC_DHSIZE_OFFSET=0x030
   XVTC_DHSYNC=XVTC_DHSYNC_OFFSET
   XVTC_DHSYNC_OFFSET=0x038
   XVtc_DisableSync(InstancePtr)=XVtc_WriteReg((InstancePtr)->Config.BaseAddress, (XVTC_CTL_OFFSET), (XVtc_ReadReg((InstancePtr)->Config.BaseAddress, (XVTC_CTL_OFFSET)) & ~(XVTC_CTL_SE_MASK)))
   XVTC_DPOL=XVTC_DPOL_OFFSET
   XVTC_DPOL_OFFSET=0x02C
   XVTC_DTSTAT=XVTC_DTSTAT_OFFSET
   XVTC_DTSTAT_OFFSET=0x024
   XVTC_DVBHOFF=XVTC_DVBHOFF_OFFSET
   XVTC_DVBHOFF_F1=XVTC_DVBHOFF_F1_OFFSET
   XVTC_DVBHOFF_F1_OFFSET=0x048
   XVTC_DVBHOFF_OFFSET=0x03C
   XVTC_DVSHOFF=XVTC_DVSHOFF_OFFSET
   XVTC_DVSHOFF_F1=XVTC_DVSHOFF_F1_OFFSET
   XVTC_DVSHOFF_F1_OFFSET=0x050
   XVTC_DVSHOFF_OFFSET=0x044
   XVTC_DVSIZE=XVTC_DVSIZE_OFFSET
   XVTC_DVSIZE_OFFSET=0x034
   XVTC_DVSYNC=XVTC_DVSYNC_OFFSET
   XVTC_DVSYNC_F1=XVTC_DVSYNC_F1_OFFSET
   XVTC_DVSYNC_F1_OFFSET=0x04C
   XVTC_DVSYNC_OFFSET=0x040
   XVtc_EnableSync(InstancePtr)=XVtc_WriteReg((InstancePtr)->Config.BaseAddress, (XVTC_CTL_OFFSET), XVtc_ReadReg((InstancePtr)->Config.BaseAddress, (XVTC_CTL_OFFSET)) | (XVTC_CTL_SE_MASK))
   XVTC_ENC_CPARITY_MASK=0x00000100
   XVTC_ENC_CPARITY_SHIFT=8
   XVTC_ENC_FPARITY_MASK=0x00000080
   XVTC_ENC_GACLS_MASK=0x00000001
   XVTC_ENC_GACPS_MASK=0x00000200
   XVTC_ENC_PROG_MASK=0x00000040
   XVTC_ENC_PROG_SHIFT=6
   XVTC_EN_DETECTOR=2
   XVTC_EN_GENERATOR=1
   XVTC_ERROR=XVTC_ERROR_OFFSET
   XVTC_ERROR_OFFSET=0x008
   XVTC_ERR_ACL_MASK=0x00200000
   XVTC_ERR_AVL_MASK=0x00100000
   XVTC_ERR_HBL_MASK=0x00020000
   XVTC_ERR_HSL_MASK=0x00080000
   XVTC_ERR_VBL_MASK=0x00010000
   XVTC_ERR_VSL_MASK=0x00040000
   XVTC_FS00=XVTC_FS00_OFFSET
   XVTC_FS00_OFFSET=0x100
   XVTC_FS01=XVTC_FS01_OFFSET
   XVTC_FS01_OFFSET=0x104
   XVTC_FS02=XVTC_FS02_OFFSET
   XVTC_FS02_OFFSET=0x108
   XVTC_FS03=XVTC_FS03_OFFSET
   XVTC_FS03_OFFSET=0x10C
   XVTC_FS04=XVTC_FS04_OFFSET
   XVTC_FS04_OFFSET=0x110
   XVTC_FS05=XVTC_FS05_OFFSET
   XVTC_FS05_OFFSET=0x114
   XVTC_FS06=XVTC_FS06_OFFSET
   XVTC_FS06_OFFSET=0x118
   XVTC_FS07=XVTC_FS07_OFFSET
   XVTC_FS07_OFFSET=0x11C
   XVTC_FS08=XVTC_FS08_OFFSET
   XVTC_FS08_OFFSET=0x120
   XVTC_FS09=XVTC_FS09_OFFSET
   XVTC_FS09_OFFSET=0x124
   XVTC_FS10=XVTC_FS10_OFFSET
   XVTC_FS10_OFFSET=0x128
   XVTC_FS11=XVTC_FS11_OFFSET
   XVTC_FS11_OFFSET=0x12C
   XVTC_FS12=XVTC_FS12_OFFSET
   XVTC_FS12_OFFSET=0x130
   XVTC_FS13=XVTC_FS13_OFFSET
   XVTC_FS13_OFFSET=0x134
   XVTC_FS14=XVTC_FS14_OFFSET
   XVTC_FS14_OFFSET=0x138
   XVTC_FS15=XVTC_FS15_OFFSET
   XVTC_FS15_OFFSET=0x13C
   XVTC_FSXX_HSTART_MASK=0x00001FFF
   XVTC_FSXX_VSTART_MASK=0x1FFF0000
   XVTC_FSXX_VSTART_SHIFT=16
   XVTC_GASIZE=XVTC_GASIZE_OFFSET
   XVTC_GASIZE_OFFSET=0x060
   XVtc_GetDetectionStatus(InstancePtr)=XVtc_ReadReg((InstancePtr)->Config.BaseAddress, (XVTC_DTSTAT_OFFSET))
   XVTC_GFENC=XVTC_GFENC_OFFSET
   XVTC_GFENC_OFFSET=0x068
   XVTC_GGD=XVTC_GGD_OFFSET
   XVTC_GGD_HDELAY_MASK=0x00001FFF
   XVTC_GGD_OFFSET=0x140
   XVTC_GGD_VDELAY_MASK=0x1FFF0000
   XVTC_GGD_VDELAY_SHIFT=16
   XVTC_GHSIZE=XVTC_GHSIZE_OFFSET
   XVTC_GHSIZE_OFFSET=0x070
   XVTC_GHSYNC=XVTC_GHSYNC_OFFSET
   XVTC_GHSYNC_OFFSET=0x078
   XVTC_GPOL=XVTC_GPOL_OFFSET
   XVTC_GPOL_OFFSET=0x06C
   XVTC_GTSTAT=XVTC_GTSTAT_OFFSET
   XVTC_GTSTAT_OFFSET=0x064
   XVTC_GVBHOFF=XVTC_GVBHOFF_OFFSET
   XVTC_GVBHOFF_F1=XVTC_GVBHOFF_F1_OFFSET
   XVTC_GVBHOFF_F1_OFFSET=0x088
   XVTC_GVBHOFF_OFFSET=0x07C
   XVTC_GVSHOFF=XVTC_GVSHOFF_OFFSET
   XVTC_GVSHOFF_F1=XVTC_GVSHOFF_F1_OFFSET
   XVTC_GVSHOFF_F1_OFFSET=0x090
   XVTC_GVSHOFF_OFFSET=0x084
   XVTC_GVSIZE=XVTC_GVSIZE_OFFSET
   XVTC_GVSIZE_OFFSET=0x074
   XVTC_GVSYNC=XVTC_GVSYNC_OFFSET
   XVTC_GVSYNC_F1=XVTC_GVSYNC_F1_OFFSET
   XVTC_GVSYNC_F1_OFFSET=0x08C
   XVTC_GVSYNC_OFFSET=0x080
   XVTC_HANDLER_DETECTOR=3
   XVTC_HANDLER_ERROR=5
   XVTC_HANDLER_FRAMESYNC=1
   XVTC_HANDLER_GENERATOR=4
   XVTC_HANDLER_LOCK=2
   XVTC_HW_H_=
   XVTC_H_=
   XVTC_IER=XVTC_IER_OFFSET
   XVTC_IER_OFFSET=0x00C
   XVtc_In32=Xil_In32
   XVtc_IntrClear(InstancePtr,IntrType)=XVtc_WriteReg((InstancePtr)->Config.BaseAddress, (XVTC_ISR_OFFSET), ((IntrType) & (XVTC_IXR_ALLINTR_MASK)))
   XVtc_IntrDisable(InstancePtr,IntrType)=XVtc_WriteReg((InstancePtr)->Config.BaseAddress, (XVTC_IER_OFFSET), XVtc_ReadReg((InstancePtr)->Config.BaseAddress, (XVTC_IER_OFFSET)) & ((~(IntrType)) & (XVTC_IXR_ALLINTR_MASK)))
   XVtc_IntrEnable(InstancePtr,IntrType)=XVtc_WriteReg((InstancePtr)->Config.BaseAddress, (XVTC_IER_OFFSET), (((IntrType) & (XVTC_IXR_ALLINTR_MASK)) | (XVtc_ReadReg((InstancePtr)->Config.BaseAddress, (XVTC_IER_OFFSET)))))
   XVtc_IntrGetPending(InstancePtr)=(XVtc_ReadReg((InstancePtr)->Config.BaseAddress, XVTC_IER_OFFSET) & XVtc_ReadReg((InstancePtr)->Config.BaseAddress, XVTC_ISR_OFFSET) & XVTC_IXR_ALLINTR_MASK)
   XVTC_ISR=XVTC_ISR_OFFSET
   XVTC_ISR_OFFSET=0x004
   XVTC_IXR_ALLINTR_MASK=(XVTC_IXR_FSYNCALL_MASK | XVTC_IXR_G_ALL_MASK | XVTC_IXR_D_ALL_MASK | XVTC_IXR_LOCKALL_MASK)
   XVTC_IXR_D_ALL_MASK=0x00000C00
   XVTC_IXR_D_AV_MASK=0x00000800
   XVTC_IXR_D_VBLANK_MASK=0x00000400
   XVTC_IXR_FSYNC00_MASK=0x00010000
   XVTC_IXR_FSYNC01_MASK=0x00020000
   XVTC_IXR_FSYNC02_MASK=0x00040000
   XVTC_IXR_FSYNC03_MASK=0x00080000
   XVTC_IXR_FSYNC04_MASK=0x00100000
   XVTC_IXR_FSYNC05_MASK=0x00200000
   XVTC_IXR_FSYNC06_MASK=0x00400000
   XVTC_IXR_FSYNC07_MASK=0x00800000
   XVTC_IXR_FSYNC08_MASK=0x01000000
   XVTC_IXR_FSYNC09_MASK=0x02000000
   XVTC_IXR_FSYNC10_MASK=0x04000000
   XVTC_IXR_FSYNC11_MASK=0x08000000
   XVTC_IXR_FSYNC12_MASK=0x10000000
   XVTC_IXR_FSYNC13_MASK=0x20000000
   XVTC_IXR_FSYNC14_MASK=0x40000000
   XVTC_IXR_FSYNC15_MASK=0x80000000
   XVTC_IXR_FSYNCALL_MASK=0xFFFF0000
   XVTC_IXR_G_ALL_MASK=0x00003000
   XVTC_IXR_G_AV_MASK=0x00002000
   XVTC_IXR_G_VBLANK_MASK=0x00001000
   XVTC_IXR_LOCKALL_MASK=0x00000300
   XVTC_IXR_LOL_MASK=0x00000200
   XVTC_IXR_LO_MASK=0x00000100
   XVtc_Out32=Xil_Out32
   XVTC_POL_ACP_MASK=0x00000020
   XVTC_POL_ALLP_MASK=0x0000007F
   XVTC_POL_AVP_MASK=0x00000010
   XVTC_POL_FIP_MASK=0x00000040
   XVTC_POL_HBP_MASK=0x00000002
   XVTC_POL_HSP_MASK=0x00000008
   XVTC_POL_VBP_MASK=0x00000001
   XVTC_POL_VSP_MASK=0x00000004
   XVtc_ReadReg(BaseAddress,RegOffset)=XVtc_In32((BaseAddress) + ((u32)RegOffset))
   XVtc_RegUpdate=XVtc_RegUpdateEnable
   XVtc_RegUpdateDisable(InstancePtr)=XVtc_WriteReg((InstancePtr)->Config.BaseAddress, (XVTC_CTL_OFFSET), XVtc_ReadReg((InstancePtr)->Config.BaseAddress, (XVTC_CTL_OFFSET)) & (~(XVTC_CTL_RU_MASK)))
   XVtc_RegUpdateEnable(InstancePtr)=XVtc_WriteReg((InstancePtr)->Config.BaseAddress, (XVTC_CTL_OFFSET), XVtc_ReadReg((InstancePtr)->Config.BaseAddress, (XVTC_CTL_OFFSET)) | (XVTC_CTL_RU_MASK))
   XVTC_REG_ADDRGAP=4
   XVtc_Reset(InstancePtr)=XVtc_WriteReg((InstancePtr)->Config.BaseAddress, (XVTC_CTL_OFFSET), (XVTC_CTL_RESET_MASK))
   XVTC_SB_END_MASK=0x1FFF0000
   XVTC_SB_END_SHIFT=16
   XVTC_SB_START_MASK=0x00001FFF
   XVtc_StatusGetPending(InstancePtr)=XVtc_ReadReg((InstancePtr)->Config.BaseAddress, (XVTC_ISR_OFFSET)) & (XVTC_IXR_ALLINTR_MASK)
   XVTC_STAT_AVIDEO_MASK=0x00000004
   XVTC_STAT_LOCKED_MASK=0x00000001
   XVTC_STAT_VBLANK_MASK=0x00000002
   XVtc_SyncReset(InstancePtr)=XVtc_WriteReg((InstancePtr)->Config.BaseAddress, (XVTC_CTL_OFFSET), (XVTC_CTL_SRST_MASK))
   XVtc_Sync_Reset=XVtc_SyncReset
   XVTC_VER=XVTC_VER_OFFSET
   XVTC_VER_IREV_MASK=0x000000FF
   XVTC_VER_IREV_SHIFT=0
   XVTC_VER_MAJOR_MASK=0xFF000000
   XVTC_VER_MAJOR_SHIFT=24
   XVTC_VER_MINOR_MASK=0x00FF0000
   XVTC_VER_MINOR_SHIFT=16
   XVTC_VER_OFFSET=0x010
   XVTC_VER_REV_MASK=0x0000FF00
   XVTC_VER_REV_SHIFT=8
   XVTC_VMODE_1080I=100
   XVTC_VMODE_1080P=2
   XVTC_VMODE_480P=3
   XVTC_VMODE_576P=4
   XVTC_VMODE_720P=1
   XVTC_VMODE_NTSC=101
   XVTC_VMODE_PAL=102
   XVTC_VMODE_SVGA=6
   XVTC_VMODE_SXGA=8
   XVTC_VMODE_VGA=5
   XVTC_VMODE_WSXGAPLUS=10
   XVTC_VMODE_WXGAPLUS=9
   XVTC_VMODE_XGA=7
   XVTC_VSIZE_F0_MASK=0x00001FFF
   XVTC_VSIZE_F1_MASK=0x1FFF0000
   XVTC_VSIZE_F1_SHIFT=16
   XVtc_WriteReg(BaseAddress,RegOffset,Data)=XVtc_Out32((BaseAddress) + ((u32)RegOffset), (u32)(Data))
   XVTC_XVXHOX_HEND_MASK=0x1FFF0000
   XVTC_XVXHOX_HEND_SHIFT=16
   XVTC_XVXHOX_HSTART_MASK=0x00001FFF
   _AND=,
   _ANSIDECL_H_=
   _ANSI_STDARG_H_=
   _ANSI_STDDEF_H=
   _ATEXIT_DYNAMIC_ALLOC=1
   _ATEXIT_INIT={_NULL, 0, {_NULL}, {{_NULL}, {_NULL}, 0, 0}}
   _ATEXIT_SIZE=32
   _ATTRIBUTE(attrs)=__attribute__ (attrs)
   _B=0200
   _BEGIN_STD_C=
   _BSDTYPES_DEFINED=
   _BSD_PTRDIFF_T_=
   _BSD_SIZE_T_=
   _BSD_SIZE_T_DEFINED_=
   _BSD_WCHAR_T_=
   _C=040
   _CAST_VOID=(void)
   _CLOCKID_T_=unsigned long
   _CLOCK_T_=unsigned long
   _CONST=const
   _CTYPE_H_=
   _DEFUN(name,arglist,args)=name(args)
   _DEFUN_VOID(name)=name(_NOARGS)
   _DOTS=, ...
   _ELIDABLE_INLINE=static __inline__
   _END_STD_C=
   _EXFNPTR(name,proto)=(* name) proto
   _EXFUN(name,proto)=name proto
   _EXFUN_NOTHROW(name,proto)=name proto _NOTHROW
   _EXPARM(name,proto)=(* name) proto
   _flockfile(fp)=(((fp)->_flags & __SSTR) ? 0 : __lock_acquire_recursive((fp)->_lock))
   _FSEEK_OPTIMIZATION=1
   _FSTDIO=
   _funlockfile(fp)=(((fp)->_flags & __SSTR) ? 0 : __lock_release_recursive((fp)->_lock))
   _FVWRITE_IN_STREAMIO=1
   _GCC_MAX_ALIGN_T=
   _GCC_PTRDIFF_T=
   _GCC_SIZE_T=
   _GCC_WCHAR_T=
   _GCC_WRAP_STDINT_H=
   _GLOBAL_ATEXIT=(_GLOBAL_REENT->_atexit)
   _GLOBAL_REENT=_global_impure_ptr
   _HAVE_CC_INHIBIT_LOOP_TO_LIBCALL=1
   _HAVE_LONG_DOUBLE=1
   _HAVE_STDC=
   _IOFBF=0
   _IOLBF=1
   _IONBF=2
   _Kmax=(sizeof (size_t) << 3)
   _L=02
   _LDBL_EQ_DBL=1
   _LONG_DOUBLE=long double
   _LONG_LONG_TYPE=long long
   _MACHINE__DEFAULT_TYPES_H=
   _MACHINE__TYPES_H=
   _MACHTYPES_H_=
   _MB_CAPABLE=1
   _MB_LEN_MAX=8
   _N=04
   _NEWLIB_STDIO_H=
   _NEWLIB_VERSION="2.1.0"
   _NOARGS=void
   _NOINLINE=__attribute__ ((__noinline__))
   _NOINLINE_STATIC=_NOINLINE static
   _NOTHROW=
   _NULL=0
   _N_LISTS=30
   _P=020
   _PARAMS(paramlist)=paramlist
   _POINTER_INT=long
   _PTR=void *
   _PTRDIFF_T=
   _PTRDIFF_T_=
   _PTRDIFF_T_DECLARED=
   _RAND48_ADD=(0x000b)
   _RAND48_MULT_0=(0xe66d)
   _RAND48_MULT_1=(0xdeec)
   _RAND48_MULT_2=(0x0005)
   _RAND48_SEED_0=(0x330e)
   _RAND48_SEED_1=(0xabcd)
   _RAND48_SEED_2=(0x1234)
   _READ_WRITE_BUFSIZE_TYPE=int
   _READ_WRITE_RETURN_TYPE=int
   _REENT=_impure_ptr
   _REENT_ASCTIME_BUF(ptr)=((ptr)->_new._reent._asctime_buf)
   _REENT_ASCTIME_SIZE=26
   _REENT_CHECK_ASCTIME_BUF(ptr)=
   _REENT_CHECK_EMERGENCY(ptr)=
   _REENT_CHECK_MISC(ptr)=
   _REENT_CHECK_MP(ptr)=
   _REENT_CHECK_RAND48(ptr)=
   _REENT_CHECK_SIGNAL_BUF(ptr)=
   _REENT_CHECK_TM(ptr)=
   _REENT_EMERGENCY(ptr)=((ptr)->_emergency)
   _REENT_EMERGENCY_SIZE=25
   _REENT_GETDATE_ERR_P(ptr)=(&((ptr)->_new._reent._getdate_err))
   _REENT_INIT(var)={ 0, &(var).__sf[0], &(var).__sf[1], &(var).__sf[2], 0, "", 0, "C", 0, _NULL, _NULL, 0, _NULL, _NULL, 0, _NULL, { { 0, _NULL, "", {0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, 1, { {_RAND48_SEED_0, _RAND48_SEED_1, _RAND48_SEED_2}, {_RAND48_MULT_0, _RAND48_MULT_1, _RAND48_MULT_2}, _RAND48_ADD }, {0, {0}}, {0, {0}}, {0, {0}}, "", "", 0, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}} } }, _REENT_INIT_ATEXIT _NULL, {_NULL, 0, _NULL} }
   _REENT_INIT_ATEXIT=_NULL, _ATEXIT_INIT,
   _REENT_INIT_PTR(var)={ memset((var), 0, sizeof(*(var))); (var)->_stdin = &(var)->__sf[0]; (var)->_stdout = &(var)->__sf[1]; (var)->_stderr = &(var)->__sf[2]; (var)->_current_locale = "C"; (var)->_new._reent._rand_next = 1; (var)->_new._reent._r48._seed[0] = _RAND48_SEED_0; (var)->_new._reent._r48._seed[1] = _RAND48_SEED_1; (var)->_new._reent._r48._seed[2] = _RAND48_SEED_2; (var)->_new._reent._r48._mult[0] = _RAND48_MULT_0; (var)->_new._reent._r48._mult[1] = _RAND48_MULT_1; (var)->_new._reent._r48._mult[2] = _RAND48_MULT_2; (var)->_new._reent._r48._add = _RAND48_ADD; }
   _REENT_L64A_BUF(ptr)=((ptr)->_new._reent._l64a_buf)
   _REENT_MBLEN_STATE(ptr)=((ptr)->_new._reent._mblen_state)
   _REENT_MBRLEN_STATE(ptr)=((ptr)->_new._reent._mbrlen_state)
   _REENT_MBRTOWC_STATE(ptr)=((ptr)->_new._reent._mbrtowc_state)
   _REENT_MBSRTOWCS_STATE(ptr)=((ptr)->_new._reent._mbsrtowcs_state)
   _REENT_MBTOWC_STATE(ptr)=((ptr)->_new._reent._mbtowc_state)
   _REENT_MP_FREELIST(ptr)=((ptr)->_freelist)
   _REENT_MP_P5S(ptr)=((ptr)->_p5s)
   _REENT_MP_RESULT(ptr)=((ptr)->_result)
   _REENT_MP_RESULT_K(ptr)=((ptr)->_result_k)
   _REENT_RAND48_ADD(ptr)=((ptr)->_new._reent._r48._add)
   _REENT_RAND48_MULT(ptr)=((ptr)->_new._reent._r48._mult)
   _REENT_RAND48_SEED(ptr)=((ptr)->_new._reent._r48._seed)
   _REENT_RAND_NEXT(ptr)=((ptr)->_new._reent._rand_next)
   _REENT_SIGNAL_BUF(ptr)=((ptr)->_new._reent._signal_buf)
   _REENT_SIGNAL_SIZE=24
   _REENT_SIGNGAM(ptr)=((ptr)->_new._reent._gamma_signgam)
   _REENT_SMALL_CHECK_INIT(ptr)=
   _REENT_STRTOK_LAST(ptr)=((ptr)->_new._reent._strtok_last)
   _REENT_TM(ptr)=(&(ptr)->_new._reent._localtime_buf)
   _REENT_WCRTOMB_STATE(ptr)=((ptr)->_new._reent._wcrtomb_state)
   _REENT_WCSRTOMBS_STATE(ptr)=((ptr)->_new._reent._wcsrtombs_state)
   _REENT_WCTOMB_STATE(ptr)=((ptr)->_new._reent._wctomb_state)
   _S=010
   _SIGNED=signed
   _SIZET_=
   _SIZE_T=
   _SIZE_T_=
   _SIZE_T_DECLARED=
   _SIZE_T_DEFINED=
   _SIZE_T_DEFINED_=
   _STDARG_H=
   _STDDEF_H=
   _STDDEF_H_=
   _stderr_r(x)=((x)->_stderr)
   _STDINT_H=
   _stdin_r(x)=((x)->_stdin)
   _STDIO_H_=
   _stdout_r(x)=((x)->_stdout)
   _STRING_H_=
   _ST_INT32=__attribute__ ((__mode__ (__SI__)))
   _SYS_CDEFS_H_=
   _SYS_FEATURES_H=
   _SYS_REENT_H_=
   _SYS_SIZE_T_H=
   _SYS_TYPES_FD_SET=
   _SYS_TYPES_H=
   _SYS__TYPES_H=
   _TIMER_T_=unsigned long
   _TIME_T_=long
   _tolower(__c)=((unsigned char)(__c) - 'A' + 'a')
   _toupper(__c)=((unsigned char)(__c) - 'a' + 'A')
   _T_PTRDIFF=
   _T_PTRDIFF_=
   _T_SIZE=
   _T_SIZE_=
   _T_WCHAR=
   _T_WCHAR_=
   _U=01
   _UNBUF_STREAM_OPT=1
   _VA_LIST=
   _VA_LIST_=
   _VA_LIST_DEFINED=
   _VA_LIST_T_H=
   _VOID=void
   _VOLATILE=volatile
   _WANT_IO_C99_FORMATS=1
   _WANT_IO_LONG_LONG=1
   _WCHAR_T=
   _WCHAR_T_=
   _WCHAR_T_DECLARED=
   _WCHAR_T_DEFINED=
   _WCHAR_T_DEFINED_=
   _WCHAR_T_H=
   _WIDE_ORIENT=1
   _WINT_T=
   _X=0100
   _XPARAMETERS_PS_H_=
   __aligned(x)=__attribute__((__aligned__(x)))
   __always_inline=__attribute__((__always_inline__))
   __ASMNAME(cname)=__XSTRING (__USER_LABEL_PREFIX__) cname
   __attribute_format_strfmon__(a,b)=
   __ATTRIBUTE_IMPURE_PTR__=
   __attribute_malloc__=
   __attribute_pure__=
   __BEGIN_DECLS=
   __bounded=
   __BSD_VISIBLE=1
   __builtin_constant_p(exp)=0
   __builtin_offsetof(T,m)=((size_t) &((T *)0)->m)
   __builtin_types_compatible_p(x,y)=__builtin_types_compatible_p(sizeof(x),sizeof(y))
   __builtin_va_arg(ap,type)=*(typeof(type) *)ap
   __caddr_t_defined=
   __CC_SUPPORTS_DYNAMIC_ARRAY_INIT=1
   __CC_SUPPORTS_INLINE=1
   __CC_SUPPORTS_VARADIC_XXX=1
   __CC_SUPPORTS_WARNING=1
   __CC_SUPPORTS___FUNC__=1
   __CC_SUPPORTS___INLINE=1
   __CC_SUPPORTS___INLINE__=1
   __CDT_PARSER__=1
   __clockid_t_defined=
   __clock_t_defined=
   __compiler_membar()=__asm __volatile(" " : : : "memory")
   __complex__=_Complex
   __CONCAT(x,y)=__CONCAT1(x,y)
   __CONCAT1(x,y)=x ## y
   __const=const
   __containerof(x,s,m)=({ const volatile __typeof__(((s *)0)->m) *__x = (x); __DEQUALIFY(s *, (const volatile char *)__x - __offsetof(s, m));})
   __COPYRIGHT(s)=struct __hack
   __COUNTER__=0
   __ctype_lookup(__c)=((__ctype_ptr__+sizeof(""[__c]))[(int)(__c)])
   __daddr_t_defined=
   __DATE__="Nov 01 2017"
   __dead2=__attribute__((__noreturn__))
   __DECONST(type,var)=((type)(__uintptr_t)(const void *)(var))
   __DEQUALIFY(type,var)=((type)(__uintptr_t)(const volatile void *)(var))
   __DEVOLATILE(type,var)=((type)(__uintptr_t)(volatile void *)(var))
   __DOTS=, ...
   __END_DECLS=
   __EXP(x)=__##x##__
   __EXPORT=
   __exported=__attribute__((__visibility__("default")))
   __extension__=
   __fastcall=__attribute__((__fastcall__))
   __FBSDID(s)=struct __hack
   __FILE__="file"
   __flexarr=[0]
   __format_arg(fmtarg)=__attribute__((__format_arg__ (fmtarg)))
   __generic(expr,t,yes,no)=_Generic(expr, t: yes, default: no)
   __GNUCLIKE_ASM=3
   __GNUCLIKE_BUILTIN_CONSTANT_P=1
   __GNUCLIKE_BUILTIN_MEMCPY=1
   __GNUCLIKE_BUILTIN_NEXT_ARG=1
   __GNUCLIKE_BUILTIN_STDARG=1
   __GNUCLIKE_BUILTIN_VAALIST=1
   __GNUCLIKE_BUILTIN_VARARGS=1
   __GNUCLIKE_CTOR_SECTION_HANDLING=1
   __GNUCLIKE_MATH_BUILTIN_CONSTANTS=
   __GNUCLIKE_MATH_BUILTIN_RELOPS=
   __GNUCLIKE___OFFSETOF=1
   __GNUCLIKE___SECTION=1
   __GNUCLIKE___TYPEOF=1
   __GNUC_PREREQ(maj,min)=((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
   __GNUC_PREREQ__(ma,mi)=__GNUC_PREREQ(ma, mi)
   __GNUC_VA_LIST=
   __GNUC_VA_LIST_COMPATIBILITY=1
   __has_builtin(x)=0
   __has_extension=__has_feature
   __has_feature(x)=0
   __have_long32=1
   __have_longlong64=1
   __hidden=__attribute__((__visibility__("hidden")))
   __IEEE_LITTLE_ENDIAN=
   __imag__=(int)
   __IMPORT=
   __int16_t_defined=1
   __int32_t_defined=1
   __int64_t_defined=1
   __int8_t_defined=1
   __INTTYPES_DEFINED__=
   __int_fast16_t_defined=1
   __int_fast32_t_defined=1
   __int_fast64_t_defined=1
   __int_fast8_t_defined=1
   __int_least16_t_defined=1
   __int_least32_t_defined=1
   __int_least64_t_defined=1
   __int_least8_t_defined=1
   __INT_WCHAR_T_H=
   __ISO_C_VISIBLE=2011
   __LINE__=1
   __lock_acquire(lock)=(_CAST_VOID 0)
   __lock_acquire_recursive(lock)=(_CAST_VOID 0)
   __lock_close(lock)=(_CAST_VOID 0)
   __lock_close_recursive(lock)=(_CAST_VOID 0)
   __LOCK_INIT(class,lock)=static int lock = 0;
   __lock_init(lock)=(_CAST_VOID 0)
   __LOCK_INIT_RECURSIVE(class,lock)=static int lock = 0;
   __lock_init_recursive(lock)=(_CAST_VOID 0)
   __lock_release(lock)=(_CAST_VOID 0)
   __lock_release_recursive(lock)=(_CAST_VOID 0)
   __lock_try_acquire(lock)=(_CAST_VOID 0)
   __lock_try_acquire_recursive(lock)=(_CAST_VOID 0)
   __Long=long
   __long_double_t=long double
   __malloc_like=__attribute__((__malloc__))
   __need_NULL=
   __need_size_t=
   __need_wint_t=
   __need___va_list=
   __NEWLIB_H__=1
   __noinline=__attribute__ ((__noinline__))
   __nonnull(x)=__attribute__((__nonnull__(x)))
   __null=(void *)0
   __offsetof(type,field)=offsetof(type, field)
   __offsetof__(x)=(x)
   __P(protos)=protos
   __packed=__attribute__((__packed__))
   __PLATFORM_CONFIG_H_=
   __PLATFORM_H_=
   __PMT(args)=args
   __POSIX_VISIBLE=200809
   __predict_false(exp)=__builtin_expect((exp), 0)
   __predict_true(exp)=__builtin_expect((exp), 1)
   __printf0like(fmtarg,firstvararg)=
   __printflike(fmtarg,firstvararg)=__attribute__((__format__ (__printf__, fmtarg, firstvararg)))
   __PTRDIFF_T=
   __ptrvalue=
   __ptr_t=void *
   __pure2=__attribute__((__const__))
   __pure=__attribute__((__pure__))
   __RAND_MAX=0x7fffffff
   __rangeof(type,start,end)=(__offsetof(type, end) - __offsetof(type, start))
   __RCSID(s)=struct __hack
   __RCSID_SOURCE(s)=struct __hack
   __real__=(int)
   __restrict=restrict
   __returns_twice=__attribute__((__returns_twice__))
   __SAPP=0x0100
   __scanflike(fmtarg,firstvararg)=__attribute__((__format__ (__scanf__, fmtarg, firstvararg)))
   __SCCSID(s)=struct __hack
   __sclearerr(p)=((void)((p)->_flags &= ~(__SERR|__SEOF)))
   __section(x)=__attribute__((__section__(x)))
   __SEOF=0x0020
   __SERR=0x0040
   __sfeof(p)=(((p)->_flags & __SEOF) != 0)
   __sferror(p)=(((p)->_flags & __SERR) != 0)
   __sfileno(p)=((p)->_file)
   __sgetc_r(__ptr,__p)=__sgetc_raw_r(__ptr, __p)
   __sgetc_raw_r(__ptr,__f)=(--(__f)->_r < 0 ? __srget_r(__ptr, __f) : (int)(*(__f)->_p++))
   __signed=signed
   __SIZE_T=
   __size_t__=
   __SL64=0x8000
   __SLBF=0x0001
   __SMBF=0x0080
   __SNBF=0x0002
   __SNPT=0x0800
   __SOFF=0x1000
   __SOPT=0x0400
   __SORD=0x2000
   __sputc_r(__ptr,__c,__p)=__sputc_raw_r(__ptr, __c, __p)
   __sputc_raw_r(__ptr,__c,__p)=(--(__p)->_w < 0 ? (__p)->_w >= (__p)->_lbfsize ? (*(__p)->_p = (__c)), *(__p)->_p != '\n' ? (int)*(__p)->_p++ : __swbuf_r(__ptr, '\n', __p) : __swbuf_r(__ptr, (int)(__c), __p) : (*(__p)->_p = (__c), (int)*(__p)->_p++))
   __SRD=0x0004
   __SRW=0x0010
   __SSTR=0x0200
   __stdcall=
   __STDINT_EXP(x)=__##x##__
   __strfmonlike(fmtarg,firstvararg)=__attribute__((__format__ (__strfmon__, fmtarg, firstvararg)))
   __strftimelike(fmtarg,firstvararg)=__attribute__((__format__ (__strftime__, fmtarg, firstvararg)))
   __STRING(x)=#x
   __strong_reference(sym,aliassym)=extern __typeof (sym) aliassym __attribute__ ((__alias__ (#sym)))
   __SWID=0x2000
   __SWR=0x0008
   __sym_compat(sym,impl,verid)=__asm__(".symver " #impl ", " #sym "@" #verid)
   __sym_default(sym,impl,verid)=__asm__(".symver " #impl ", " #sym "@@" #verid)
   __SYS_CONFIG_H__=
   __SYS_LOCK_H__=
   __thread=
   __THROW=
   __timer_t_defined=
   __timespec_defined=
   __time_t_defined=
   __TIME__="19:38:43"
   __unbounded=
   __unused=__attribute__((__unused__))
   __used=__attribute__((__used__))
   __u_char_defined=
   __u_int_defined=
   __u_long_defined=
   __u_short_defined=
   __VALIST=__gnuc_va_list
   __va_copy(d,s)=__builtin_va_copy(d,s)
   __va_list__=
   __volatile=volatile
   __warn_references(sym,msg)=__asm__(".section .gnu.warning." #sym); __asm__(".asciz \"" msg "\""); __asm__(".previous")
   __WCHAR_T=
   __wchar_t__=
   __weak_reference(sym,alias)=__asm__(".weak " #alias); __asm__(".equ " #alias ", " #sym)
   __XSI_VISIBLE=700
   __XSTRING(x)=__STRING(x)
   __XUINT64__=
   ___int16_t_defined=1
   ___int32_t_defined=1
   ___int64_t_defined=1
   ___int8_t_defined=1
   ___int_least16_t_defined=1
   ___int_least32_t_defined=1
   ___int_least64_t_defined=1
   ___int_least8_t_defined=1
   ___int_ptrdiff_t_h=
   ___int_size_t_h=
   ___int_wchar_t_h=

Macro definitions (from files actually parsed):
   PROBE_COM_CFG_RS232_EN=DEF_ENABLED
   PROBE_COM_CFG_RX_MAX_SIZE=256
   PROBE_COM_CFG_STAT_EN=DEF_ENABLED
   PROBE_COM_CFG_STR_IN_BUF_SIZE=128
   PROBE_COM_CFG_STR_OUT_BUF_SIZE=2048
   PROBE_COM_CFG_STR_REQ_EN=DEF_ENABLED
   PROBE_COM_CFG_TCPIP_EN=DEF_ENABLED
   PROBE_COM_CFG_TERMINAL_REQ_EN=DEF_ENABLED
   PROBE_COM_CFG_TX_MAX_SIZE=256
   PROBE_COM_CFG_USB_EN=DEF_ENABLED
   PROBE_COM_CFG_WR_REQ_EN=DEF_ENABLED
   PROBE_RS232_CFG_COMM_SEL=PROBE_RS232_UART_2
   PROBE_RS232_CFG_PARSE_TASK_EN=DEF_ENABLED
   PROBE_RS232_CFG_RX_BUF_SIZE=PROBE_COM_CFG_RX_MAX_SIZE
   PROBE_RS232_CFG_TASK_PRIO=10
   PROBE_RS232_CFG_TASK_STK_SIZE=128
   PROBE_RS232_CFG_TX_BUF_SIZE=PROBE_COM_CFG_TX_MAX_SIZE
   PROBE_RS232_UART_0=1
   PROBE_RS232_UART_1=2
   PROBE_RS232_UART_2=3
   PROBE_RS232_UART_3=4
   PROBE_RS232_UART_4=5
   PROBE_RS232_UART_5=6
   PROBE_RS232_UART_6=7
   PROBE_RS232_UART_7=8
   PROBE_RS232_UART_8=9
   PROBE_RS232_UART_9=10
   PROBE_RS232_UART_DBG=63
   PROBE_TCPIP_CFG_PORT=9930
   PROBE_TCPIP_CFG_RX_BUF_SIZE=PROBE_COM_CFG_RX_MAX_SIZE
   PROBE_TCPIP_CFG_TASK_PRIO=11
   PROBE_TCPIP_CFG_TASK_STK_SIZE=512
   PROBE_TCPIP_CFG_TX_BUF_SIZE=PROBE_COM_CFG_TX_MAX_SIZE
   PROBE_USB_CFG_INIT_STACK=DEF_TRUE
   PROBE_USB_CFG_RX_BUF_SIZE=PROBE_COM_CFG_RX_MAX_SIZE
   PROBE_USB_CFG_RX_TIMEOUT_MS=100u
   PROBE_USB_CFG_TASK_PRIO=12
   PROBE_USB_CFG_TASK_STK_SIZE=256
   PROBE_USB_CFG_TX_BUF_SIZE=PROBE_COM_CFG_TX_MAX_SIZE
   PROBE_USB_CFG_TX_TIMEOUT_MS=100u

Written on Wed Nov 01 19:38:43 GMT 2017
